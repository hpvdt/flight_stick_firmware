
Flightstick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b7c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08002c88  08002c88  00003c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d44  08002d44  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002d44  08002d44  00003d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d4c  08002d4c  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d4c  08002d4c  00003d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d50  08002d50  00003d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002d54  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000005c  08002db0  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08002db0  00004264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2a3  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000183d  00000000  00000000  0000e328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  0000fb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000073d  00000000  00000000  000104a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178e2  00000000  00000000  00010be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c61f  00000000  00000000  000284c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088a3b  00000000  00000000  00034ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd521  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b04  00000000  00000000  000bd564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000c0068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c70 	.word	0x08002c70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002c70 	.word	0x08002c70

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
int i2c_write(uint8_t devaddr, uint8_t reg, uint8_t data, uint32_t timeout);
int i2c_read(uint8_t devaddr, uint8_t reg, uint32_t timeout);


int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b09c      	sub	sp, #112	@ 0x70
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fb01 	bl	8000768 <HAL_Init>
  /* USER CODE BEGIN Init */
  //hi2c1.Init.OwnAddress1 = 0x30;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f85d 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f915 	bl	8000398 <MX_GPIO_Init>
  MX_I2C1_Init();
 800016e:	f000 f8bb 	bl	80002e8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000172:	f000 f8e7 	bl	8000344 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char uart_buf[64];
  uint8_t i2c_rx_buffer[32];
  char *error_msg = "booting\r\n";
 8000176:	4b25      	ldr	r3, [pc, #148]	@ (800020c <main+0xb0>)
 8000178:	66fb      	str	r3, [r7, #108]	@ 0x6c
  HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 800017a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800017c:	f7ff ffe6 	bl	800014c <strlen>
 8000180:	4603      	mov	r3, r0
 8000182:	b29a      	uxth	r2, r3
 8000184:	f04f 33ff 	mov.w	r3, #4294967295
 8000188:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800018a:	4821      	ldr	r0, [pc, #132]	@ (8000210 <main+0xb4>)
 800018c:	f001 fed8 	bl	8001f40 <HAL_UART_Transmit>
  while (1)
  {
      // Wait for I2C data (blocking)
      if (HAL_I2C_Slave_Receive(&hi2c1, i2c_rx_buffer, sizeof(i2c_rx_buffer), 1000) == HAL_OK)
 8000190:	1d39      	adds	r1, r7, #4
 8000192:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000196:	2220      	movs	r2, #32
 8000198:	481e      	ldr	r0, [pc, #120]	@ (8000214 <main+0xb8>)
 800019a:	f000 ff2f 	bl	8000ffc <HAL_I2C_Slave_Receive>
 800019e:	4603      	mov	r3, r0
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d115      	bne.n	80001d0 <main+0x74>
      {
          snprintf(uart_buf, sizeof(uart_buf), "Received: %s\r\n", i2c_rx_buffer);
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80001aa:	4a1b      	ldr	r2, [pc, #108]	@ (8000218 <main+0xbc>)
 80001ac:	2140      	movs	r1, #64	@ 0x40
 80001ae:	f002 f89b 	bl	80022e8 <sniprintf>
          HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 80001b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80001b6:	4618      	mov	r0, r3
 80001b8:	f7ff ffc8 	bl	800014c <strlen>
 80001bc:	4603      	mov	r3, r0
 80001be:	b29a      	uxth	r2, r3
 80001c0:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80001c4:	f04f 33ff 	mov.w	r3, #4294967295
 80001c8:	4811      	ldr	r0, [pc, #68]	@ (8000210 <main+0xb4>)
 80001ca:	f001 feb9 	bl	8001f40 <HAL_UART_Transmit>
 80001ce:	e00c      	b.n	80001ea <main+0x8e>
      }
      else
      {
          char *error_msg = "I2C receive error\r\n";
 80001d0:	4b12      	ldr	r3, [pc, #72]	@ (800021c <main+0xc0>)
 80001d2:	66bb      	str	r3, [r7, #104]	@ 0x68
          HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 80001d4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80001d6:	f7ff ffb9 	bl	800014c <strlen>
 80001da:	4603      	mov	r3, r0
 80001dc:	b29a      	uxth	r2, r3
 80001de:	f04f 33ff 	mov.w	r3, #4294967295
 80001e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80001e4:	480a      	ldr	r0, [pc, #40]	@ (8000210 <main+0xb4>)
 80001e6:	f001 feab 	bl	8001f40 <HAL_UART_Transmit>
      }
      char *error_msg = "loop complete\r\n";
 80001ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000220 <main+0xc4>)
 80001ec:	667b      	str	r3, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 80001ee:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80001f0:	f7ff ffac 	bl	800014c <strlen>
 80001f4:	4603      	mov	r3, r0
 80001f6:	b29a      	uxth	r2, r3
 80001f8:	f04f 33ff 	mov.w	r3, #4294967295
 80001fc:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80001fe:	4804      	ldr	r0, [pc, #16]	@ (8000210 <main+0xb4>)
 8000200:	f001 fe9e 	bl	8001f40 <HAL_UART_Transmit>

      HAL_Delay(100); // Small delay to avoid flooding UART
 8000204:	2064      	movs	r0, #100	@ 0x64
 8000206:	f000 fb11 	bl	800082c <HAL_Delay>
  {
 800020a:	e7c1      	b.n	8000190 <main+0x34>
 800020c:	08002c88 	.word	0x08002c88
 8000210:	200000cc 	.word	0x200000cc
 8000214:	20000078 	.word	0x20000078
 8000218:	08002c94 	.word	0x08002c94
 800021c:	08002ca4 	.word	0x08002ca4
 8000220:	08002cb8 	.word	0x08002cb8

08000224 <SystemClock_Config>:
	sprintf(outbuff,msg,num);
	HAL_UART_Transmit(&huart2, (uint8_t*)outbuff, strlen(outbuff), 5000);
}

void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b094      	sub	sp, #80	@ 0x50
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800022e:	2228      	movs	r2, #40	@ 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f002 f88c 	bl	8002350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	60da      	str	r2, [r3, #12]
 8000246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000254:	2301      	movs	r3, #1
 8000256:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000258:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800025c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000262:	2301      	movs	r3, #1
 8000264:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000266:	2302      	movs	r3, #2
 8000268:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800026e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000270:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000274:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000276:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800027a:	4618      	mov	r0, r3
 800027c:	f001 f912 	bl	80014a4 <HAL_RCC_OscConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000286:	f000 f90f 	bl	80004a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028a:	230f      	movs	r3, #15
 800028c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028e:	2302      	movs	r3, #2
 8000290:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000296:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800029a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002a0:	f107 0314 	add.w	r3, r7, #20
 80002a4:	2101      	movs	r1, #1
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 fb7e 	bl	80019a8 <HAL_RCC_ClockConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002b2:	f000 f8f9 	bl	80004a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002b6:	2310      	movs	r3, #16
 80002b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80002ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80002be:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 fd36 	bl	8001d34 <HAL_RCCEx_PeriphCLKConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002ce:	f000 f8eb 	bl	80004a8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80002d2:	2200      	movs	r2, #0
 80002d4:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80002d8:	2000      	movs	r0, #0
 80002da:	f001 fc4f 	bl	8001b7c <HAL_RCC_MCOConfig>
}
 80002de:	bf00      	nop
 80002e0:	3750      	adds	r7, #80	@ 0x50
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002ec:	4b12      	ldr	r3, [pc, #72]	@ (8000338 <MX_I2C1_Init+0x50>)
 80002ee:	4a13      	ldr	r2, [pc, #76]	@ (800033c <MX_I2C1_Init+0x54>)
 80002f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002f2:	4b11      	ldr	r3, [pc, #68]	@ (8000338 <MX_I2C1_Init+0x50>)
 80002f4:	4a12      	ldr	r2, [pc, #72]	@ (8000340 <MX_I2C1_Init+0x58>)
 80002f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000338 <MX_I2C1_Init+0x50>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0x44;
 80002fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000338 <MX_I2C1_Init+0x50>)
 8000300:	2244      	movs	r2, #68	@ 0x44
 8000302:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000304:	4b0c      	ldr	r3, [pc, #48]	@ (8000338 <MX_I2C1_Init+0x50>)
 8000306:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800030a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800030c:	4b0a      	ldr	r3, [pc, #40]	@ (8000338 <MX_I2C1_Init+0x50>)
 800030e:	2200      	movs	r2, #0
 8000310:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0x44;
 8000312:	4b09      	ldr	r3, [pc, #36]	@ (8000338 <MX_I2C1_Init+0x50>)
 8000314:	2244      	movs	r2, #68	@ 0x44
 8000316:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000318:	4b07      	ldr	r3, [pc, #28]	@ (8000338 <MX_I2C1_Init+0x50>)
 800031a:	2200      	movs	r2, #0
 800031c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800031e:	4b06      	ldr	r3, [pc, #24]	@ (8000338 <MX_I2C1_Init+0x50>)
 8000320:	2200      	movs	r2, #0
 8000322:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000324:	4804      	ldr	r0, [pc, #16]	@ (8000338 <MX_I2C1_Init+0x50>)
 8000326:	f000 fd25 	bl	8000d74 <HAL_I2C_Init>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000330:	f000 f8ba 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000334:	bf00      	nop
 8000336:	bd80      	pop	{r7, pc}
 8000338:	20000078 	.word	0x20000078
 800033c:	40005400 	.word	0x40005400
 8000340:	000186a0 	.word	0x000186a0

08000344 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000348:	4b11      	ldr	r3, [pc, #68]	@ (8000390 <MX_USART2_UART_Init+0x4c>)
 800034a:	4a12      	ldr	r2, [pc, #72]	@ (8000394 <MX_USART2_UART_Init+0x50>)
 800034c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800034e:	4b10      	ldr	r3, [pc, #64]	@ (8000390 <MX_USART2_UART_Init+0x4c>)
 8000350:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000356:	4b0e      	ldr	r3, [pc, #56]	@ (8000390 <MX_USART2_UART_Init+0x4c>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800035c:	4b0c      	ldr	r3, [pc, #48]	@ (8000390 <MX_USART2_UART_Init+0x4c>)
 800035e:	2200      	movs	r2, #0
 8000360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000362:	4b0b      	ldr	r3, [pc, #44]	@ (8000390 <MX_USART2_UART_Init+0x4c>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000368:	4b09      	ldr	r3, [pc, #36]	@ (8000390 <MX_USART2_UART_Init+0x4c>)
 800036a:	220c      	movs	r2, #12
 800036c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800036e:	4b08      	ldr	r3, [pc, #32]	@ (8000390 <MX_USART2_UART_Init+0x4c>)
 8000370:	2200      	movs	r2, #0
 8000372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000374:	4b06      	ldr	r3, [pc, #24]	@ (8000390 <MX_USART2_UART_Init+0x4c>)
 8000376:	2200      	movs	r2, #0
 8000378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800037a:	4805      	ldr	r0, [pc, #20]	@ (8000390 <MX_USART2_UART_Init+0x4c>)
 800037c:	f001 fd90 	bl	8001ea0 <HAL_UART_Init>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000386:	f000 f88f 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	200000cc 	.word	0x200000cc
 8000394:	40004400 	.word	0x40004400

08000398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b088      	sub	sp, #32
 800039c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039e:	f107 0310 	add.w	r3, r7, #16
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ac:	4b3a      	ldr	r3, [pc, #232]	@ (8000498 <MX_GPIO_Init+0x100>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a39      	ldr	r2, [pc, #228]	@ (8000498 <MX_GPIO_Init+0x100>)
 80003b2:	f043 0320 	orr.w	r3, r3, #32
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b37      	ldr	r3, [pc, #220]	@ (8000498 <MX_GPIO_Init+0x100>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0320 	and.w	r3, r3, #32
 80003c0:	60fb      	str	r3, [r7, #12]
 80003c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c4:	4b34      	ldr	r3, [pc, #208]	@ (8000498 <MX_GPIO_Init+0x100>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a33      	ldr	r2, [pc, #204]	@ (8000498 <MX_GPIO_Init+0x100>)
 80003ca:	f043 0304 	orr.w	r3, r3, #4
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b31      	ldr	r3, [pc, #196]	@ (8000498 <MX_GPIO_Init+0x100>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0304 	and.w	r3, r3, #4
 80003d8:	60bb      	str	r3, [r7, #8]
 80003da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003dc:	4b2e      	ldr	r3, [pc, #184]	@ (8000498 <MX_GPIO_Init+0x100>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a2d      	ldr	r2, [pc, #180]	@ (8000498 <MX_GPIO_Init+0x100>)
 80003e2:	f043 0308 	orr.w	r3, r3, #8
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000498 <MX_GPIO_Init+0x100>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0308 	and.w	r3, r3, #8
 80003f0:	607b      	str	r3, [r7, #4]
 80003f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2180      	movs	r1, #128	@ 0x80
 80003f8:	4828      	ldr	r0, [pc, #160]	@ (800049c <MX_GPIO_Init+0x104>)
 80003fa:	f000 fca3 	bl	8000d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11
 80003fe:	2200      	movs	r2, #0
 8000400:	f64f 0147 	movw	r1, #63559	@ 0xf847
 8000404:	4826      	ldr	r0, [pc, #152]	@ (80004a0 <MX_GPIO_Init+0x108>)
 8000406:	f000 fc9d 	bl	8000d44 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800040a:	2373      	movs	r3, #115	@ 0x73
 800040c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000412:	2300      	movs	r3, #0
 8000414:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4619      	mov	r1, r3
 800041c:	481f      	ldr	r0, [pc, #124]	@ (800049c <MX_GPIO_Init+0x104>)
 800041e:	f000 fb0d 	bl	8000a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000422:	2380      	movs	r3, #128	@ 0x80
 8000424:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000426:	2301      	movs	r3, #1
 8000428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042a:	2300      	movs	r3, #0
 800042c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042e:	2302      	movs	r3, #2
 8000430:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000432:	f107 0310 	add.w	r3, r7, #16
 8000436:	4619      	mov	r1, r3
 8000438:	4818      	ldr	r0, [pc, #96]	@ (800049c <MX_GPIO_Init+0x104>)
 800043a:	f000 faff 	bl	8000a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11
                           PB12 PB13 PB14 PB15
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11
 800043e:	f64f 0347 	movw	r3, #63559	@ 0xf847
 8000442:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000444:	2301      	movs	r3, #1
 8000446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000448:	2300      	movs	r3, #0
 800044a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044c:	2302      	movs	r3, #2
 800044e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000450:	f107 0310 	add.w	r3, r7, #16
 8000454:	4619      	mov	r1, r3
 8000456:	4812      	ldr	r0, [pc, #72]	@ (80004a0 <MX_GPIO_Init+0x108>)
 8000458:	f000 faf0 	bl	8000a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800045c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000462:	2302      	movs	r3, #2
 8000464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000466:	2302      	movs	r3, #2
 8000468:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046a:	f107 0310 	add.w	r3, r7, #16
 800046e:	4619      	mov	r1, r3
 8000470:	480a      	ldr	r0, [pc, #40]	@ (800049c <MX_GPIO_Init+0x104>)
 8000472:	f000 fae3 	bl	8000a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000476:	2380      	movs	r3, #128	@ 0x80
 8000478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800047a:	4b0a      	ldr	r3, [pc, #40]	@ (80004a4 <MX_GPIO_Init+0x10c>)
 800047c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047e:	2300      	movs	r3, #0
 8000480:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000482:	f107 0310 	add.w	r3, r7, #16
 8000486:	4619      	mov	r1, r3
 8000488:	4805      	ldr	r0, [pc, #20]	@ (80004a0 <MX_GPIO_Init+0x108>)
 800048a:	f000 fad7 	bl	8000a3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800048e:	bf00      	nop
 8000490:	3720      	adds	r7, #32
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000
 800049c:	40010800 	.word	0x40010800
 80004a0:	40010c00 	.word	0x40010c00
 80004a4:	10110000 	.word	0x10110000

080004a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ac:	b672      	cpsid	i
}
 80004ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b0:	bf00      	nop
 80004b2:	e7fd      	b.n	80004b0 <Error_Handler+0x8>

080004b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ba:	4b15      	ldr	r3, [pc, #84]	@ (8000510 <HAL_MspInit+0x5c>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	4a14      	ldr	r2, [pc, #80]	@ (8000510 <HAL_MspInit+0x5c>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6193      	str	r3, [r2, #24]
 80004c6:	4b12      	ldr	r3, [pc, #72]	@ (8000510 <HAL_MspInit+0x5c>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000510 <HAL_MspInit+0x5c>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000510 <HAL_MspInit+0x5c>)
 80004d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004dc:	61d3      	str	r3, [r2, #28]
 80004de:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <HAL_MspInit+0x5c>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000514 <HAL_MspInit+0x60>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	4a04      	ldr	r2, [pc, #16]	@ (8000514 <HAL_MspInit+0x60>)
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	40021000 	.word	0x40021000
 8000514:	40010000 	.word	0x40010000

08000518 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	@ 0x28
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000520:	f107 0314 	add.w	r3, r7, #20
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a1d      	ldr	r2, [pc, #116]	@ (80005a8 <HAL_I2C_MspInit+0x90>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d132      	bne.n	800059e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000538:	4b1c      	ldr	r3, [pc, #112]	@ (80005ac <HAL_I2C_MspInit+0x94>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a1b      	ldr	r2, [pc, #108]	@ (80005ac <HAL_I2C_MspInit+0x94>)
 800053e:	f043 0308 	orr.w	r3, r3, #8
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b19      	ldr	r3, [pc, #100]	@ (80005ac <HAL_I2C_MspInit+0x94>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0308 	and.w	r3, r3, #8
 800054c:	613b      	str	r3, [r7, #16]
 800054e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000550:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000556:	2312      	movs	r3, #18
 8000558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800055a:	2303      	movs	r3, #3
 800055c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	4619      	mov	r1, r3
 8000564:	4812      	ldr	r0, [pc, #72]	@ (80005b0 <HAL_I2C_MspInit+0x98>)
 8000566:	f000 fa69 	bl	8000a3c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800056a:	4b12      	ldr	r3, [pc, #72]	@ (80005b4 <HAL_I2C_MspInit+0x9c>)
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000572:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000576:	627b      	str	r3, [r7, #36]	@ 0x24
 8000578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800057a:	f043 0302 	orr.w	r3, r3, #2
 800057e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000580:	4a0c      	ldr	r2, [pc, #48]	@ (80005b4 <HAL_I2C_MspInit+0x9c>)
 8000582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000584:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000586:	4b09      	ldr	r3, [pc, #36]	@ (80005ac <HAL_I2C_MspInit+0x94>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	4a08      	ldr	r2, [pc, #32]	@ (80005ac <HAL_I2C_MspInit+0x94>)
 800058c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000590:	61d3      	str	r3, [r2, #28]
 8000592:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <HAL_I2C_MspInit+0x94>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800059e:	bf00      	nop
 80005a0:	3728      	adds	r7, #40	@ 0x28
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40005400 	.word	0x40005400
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40010c00 	.word	0x40010c00
 80005b4:	40010000 	.word	0x40010000

080005b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b088      	sub	sp, #32
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a1b      	ldr	r2, [pc, #108]	@ (8000640 <HAL_UART_MspInit+0x88>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d12f      	bne.n	8000638 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000644 <HAL_UART_MspInit+0x8c>)
 80005da:	69db      	ldr	r3, [r3, #28]
 80005dc:	4a19      	ldr	r2, [pc, #100]	@ (8000644 <HAL_UART_MspInit+0x8c>)
 80005de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005e2:	61d3      	str	r3, [r2, #28]
 80005e4:	4b17      	ldr	r3, [pc, #92]	@ (8000644 <HAL_UART_MspInit+0x8c>)
 80005e6:	69db      	ldr	r3, [r3, #28]
 80005e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f0:	4b14      	ldr	r3, [pc, #80]	@ (8000644 <HAL_UART_MspInit+0x8c>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a13      	ldr	r2, [pc, #76]	@ (8000644 <HAL_UART_MspInit+0x8c>)
 80005f6:	f043 0304 	orr.w	r3, r3, #4
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b11      	ldr	r3, [pc, #68]	@ (8000644 <HAL_UART_MspInit+0x8c>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f003 0304 	and.w	r3, r3, #4
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000608:	2304      	movs	r3, #4
 800060a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060c:	2302      	movs	r3, #2
 800060e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000610:	2303      	movs	r3, #3
 8000612:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000614:	f107 0310 	add.w	r3, r7, #16
 8000618:	4619      	mov	r1, r3
 800061a:	480b      	ldr	r0, [pc, #44]	@ (8000648 <HAL_UART_MspInit+0x90>)
 800061c:	f000 fa0e 	bl	8000a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000620:	2308      	movs	r3, #8
 8000622:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062c:	f107 0310 	add.w	r3, r7, #16
 8000630:	4619      	mov	r1, r3
 8000632:	4805      	ldr	r0, [pc, #20]	@ (8000648 <HAL_UART_MspInit+0x90>)
 8000634:	f000 fa02 	bl	8000a3c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40004400 	.word	0x40004400
 8000644:	40021000 	.word	0x40021000
 8000648:	40010800 	.word	0x40010800

0800064c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <NMI_Handler+0x4>

08000654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <HardFault_Handler+0x4>

0800065c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <MemManage_Handler+0x4>

08000664 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <BusFault_Handler+0x4>

0800066c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <UsageFault_Handler+0x4>

08000674 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr

08000680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800069c:	f000 f8aa 	bl	80007f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006ac:	4a14      	ldr	r2, [pc, #80]	@ (8000700 <_sbrk+0x5c>)
 80006ae:	4b15      	ldr	r3, [pc, #84]	@ (8000704 <_sbrk+0x60>)
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006b8:	4b13      	ldr	r3, [pc, #76]	@ (8000708 <_sbrk+0x64>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d102      	bne.n	80006c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006c0:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <_sbrk+0x64>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	@ (800070c <_sbrk+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006c6:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <_sbrk+0x64>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	693a      	ldr	r2, [r7, #16]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d207      	bcs.n	80006e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006d4:	f001 fe44 	bl	8002360 <__errno>
 80006d8:	4603      	mov	r3, r0
 80006da:	220c      	movs	r2, #12
 80006dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
 80006e2:	e009      	b.n	80006f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006e4:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <_sbrk+0x64>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ea:	4b07      	ldr	r3, [pc, #28]	@ (8000708 <_sbrk+0x64>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	4a05      	ldr	r2, [pc, #20]	@ (8000708 <_sbrk+0x64>)
 80006f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006f6:	68fb      	ldr	r3, [r7, #12]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20005000 	.word	0x20005000
 8000704:	00000400 	.word	0x00000400
 8000708:	20000114 	.word	0x20000114
 800070c:	20000268 	.word	0x20000268

08000710 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800071c:	f7ff fff8 	bl	8000710 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000720:	480b      	ldr	r0, [pc, #44]	@ (8000750 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000722:	490c      	ldr	r1, [pc, #48]	@ (8000754 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000724:	4a0c      	ldr	r2, [pc, #48]	@ (8000758 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000728:	e002      	b.n	8000730 <LoopCopyDataInit>

0800072a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800072c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072e:	3304      	adds	r3, #4

08000730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000734:	d3f9      	bcc.n	800072a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000736:	4a09      	ldr	r2, [pc, #36]	@ (800075c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000738:	4c09      	ldr	r4, [pc, #36]	@ (8000760 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800073c:	e001      	b.n	8000742 <LoopFillZerobss>

0800073e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000740:	3204      	adds	r2, #4

08000742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000744:	d3fb      	bcc.n	800073e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000746:	f001 fe11 	bl	800236c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800074a:	f7ff fd07 	bl	800015c <main>
  bx lr
 800074e:	4770      	bx	lr
  ldr r0, =_sdata
 8000750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000754:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000758:	08002d54 	.word	0x08002d54
  ldr r2, =_sbss
 800075c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000760:	20000264 	.word	0x20000264

08000764 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000764:	e7fe      	b.n	8000764 <ADC1_2_IRQHandler>
	...

08000768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800076c:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <HAL_Init+0x28>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a07      	ldr	r2, [pc, #28]	@ (8000790 <HAL_Init+0x28>)
 8000772:	f043 0310 	orr.w	r3, r3, #16
 8000776:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000778:	2003      	movs	r0, #3
 800077a:	f000 f92b 	bl	80009d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077e:	200f      	movs	r0, #15
 8000780:	f000 f808 	bl	8000794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000784:	f7ff fe96 	bl	80004b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40022000 	.word	0x40022000

08000794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <HAL_InitTick+0x54>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <HAL_InitTick+0x58>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4619      	mov	r1, r3
 80007a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 f935 	bl	8000a22 <HAL_SYSTICK_Config>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
 80007c0:	e00e      	b.n	80007e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b0f      	cmp	r3, #15
 80007c6:	d80a      	bhi.n	80007de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c8:	2200      	movs	r2, #0
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	f04f 30ff 	mov.w	r0, #4294967295
 80007d0:	f000 f90b 	bl	80009ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d4:	4a06      	ldr	r2, [pc, #24]	@ (80007f0 <HAL_InitTick+0x5c>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007da:	2300      	movs	r3, #0
 80007dc:	e000      	b.n	80007e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000008 	.word	0x20000008
 80007f0:	20000004 	.word	0x20000004

080007f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f8:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <HAL_IncTick+0x1c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <HAL_IncTick+0x20>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4413      	add	r3, r2
 8000804:	4a03      	ldr	r2, [pc, #12]	@ (8000814 <HAL_IncTick+0x20>)
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	20000008 	.word	0x20000008
 8000814:	20000118 	.word	0x20000118

08000818 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  return uwTick;
 800081c:	4b02      	ldr	r3, [pc, #8]	@ (8000828 <HAL_GetTick+0x10>)
 800081e:	681b      	ldr	r3, [r3, #0]
}
 8000820:	4618      	mov	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	20000118 	.word	0x20000118

0800082c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000834:	f7ff fff0 	bl	8000818 <HAL_GetTick>
 8000838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000844:	d005      	beq.n	8000852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000846:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <HAL_Delay+0x44>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	461a      	mov	r2, r3
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	4413      	add	r3, r2
 8000850:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000852:	bf00      	nop
 8000854:	f7ff ffe0 	bl	8000818 <HAL_GetTick>
 8000858:	4602      	mov	r2, r0
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	429a      	cmp	r2, r3
 8000862:	d8f7      	bhi.n	8000854 <HAL_Delay+0x28>
  {
  }
}
 8000864:	bf00      	nop
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000008 	.word	0x20000008

08000874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000884:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000890:	4013      	ands	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800089c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008a6:	4a04      	ldr	r2, [pc, #16]	@ (80008b8 <__NVIC_SetPriorityGrouping+0x44>)
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	60d3      	str	r3, [r2, #12]
}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c0:	4b04      	ldr	r3, [pc, #16]	@ (80008d4 <__NVIC_GetPriorityGrouping+0x18>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	0a1b      	lsrs	r3, r3, #8
 80008c6:	f003 0307 	and.w	r3, r3, #7
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	6039      	str	r1, [r7, #0]
 80008e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	db0a      	blt.n	8000902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	490c      	ldr	r1, [pc, #48]	@ (8000924 <__NVIC_SetPriority+0x4c>)
 80008f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f6:	0112      	lsls	r2, r2, #4
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	440b      	add	r3, r1
 80008fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000900:	e00a      	b.n	8000918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4908      	ldr	r1, [pc, #32]	@ (8000928 <__NVIC_SetPriority+0x50>)
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	f003 030f 	and.w	r3, r3, #15
 800090e:	3b04      	subs	r3, #4
 8000910:	0112      	lsls	r2, r2, #4
 8000912:	b2d2      	uxtb	r2, r2
 8000914:	440b      	add	r3, r1
 8000916:	761a      	strb	r2, [r3, #24]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000e100 	.word	0xe000e100
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092c:	b480      	push	{r7}
 800092e:	b089      	sub	sp, #36	@ 0x24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	f1c3 0307 	rsb	r3, r3, #7
 8000946:	2b04      	cmp	r3, #4
 8000948:	bf28      	it	cs
 800094a:	2304      	movcs	r3, #4
 800094c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3304      	adds	r3, #4
 8000952:	2b06      	cmp	r3, #6
 8000954:	d902      	bls.n	800095c <NVIC_EncodePriority+0x30>
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3b03      	subs	r3, #3
 800095a:	e000      	b.n	800095e <NVIC_EncodePriority+0x32>
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000960:	f04f 32ff 	mov.w	r2, #4294967295
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43da      	mvns	r2, r3
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	401a      	ands	r2, r3
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000974:	f04f 31ff 	mov.w	r1, #4294967295
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	fa01 f303 	lsl.w	r3, r1, r3
 800097e:	43d9      	mvns	r1, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	4313      	orrs	r3, r2
         );
}
 8000986:	4618      	mov	r0, r3
 8000988:	3724      	adds	r7, #36	@ 0x24
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr

08000990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3b01      	subs	r3, #1
 800099c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009a0:	d301      	bcc.n	80009a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a2:	2301      	movs	r3, #1
 80009a4:	e00f      	b.n	80009c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a6:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <SysTick_Config+0x40>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ae:	210f      	movs	r1, #15
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	f7ff ff90 	bl	80008d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b8:	4b05      	ldr	r3, [pc, #20]	@ (80009d0 <SysTick_Config+0x40>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009be:	4b04      	ldr	r3, [pc, #16]	@ (80009d0 <SysTick_Config+0x40>)
 80009c0:	2207      	movs	r2, #7
 80009c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	e000e010 	.word	0xe000e010

080009d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff ff49 	bl	8000874 <__NVIC_SetPriorityGrouping>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b086      	sub	sp, #24
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	4603      	mov	r3, r0
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
 80009f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009fc:	f7ff ff5e 	bl	80008bc <__NVIC_GetPriorityGrouping>
 8000a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	68b9      	ldr	r1, [r7, #8]
 8000a06:	6978      	ldr	r0, [r7, #20]
 8000a08:	f7ff ff90 	bl	800092c <NVIC_EncodePriority>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a12:	4611      	mov	r1, r2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff5f 	bl	80008d8 <__NVIC_SetPriority>
}
 8000a1a:	bf00      	nop
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f7ff ffb0 	bl	8000990 <SysTick_Config>
 8000a30:	4603      	mov	r3, r0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b08b      	sub	sp, #44	@ 0x2c
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a4e:	e169      	b.n	8000d24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a50:	2201      	movs	r2, #1
 8000a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	69fa      	ldr	r2, [r7, #28]
 8000a60:	4013      	ands	r3, r2
 8000a62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	f040 8158 	bne.w	8000d1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	4a9a      	ldr	r2, [pc, #616]	@ (8000cdc <HAL_GPIO_Init+0x2a0>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d05e      	beq.n	8000b36 <HAL_GPIO_Init+0xfa>
 8000a78:	4a98      	ldr	r2, [pc, #608]	@ (8000cdc <HAL_GPIO_Init+0x2a0>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d875      	bhi.n	8000b6a <HAL_GPIO_Init+0x12e>
 8000a7e:	4a98      	ldr	r2, [pc, #608]	@ (8000ce0 <HAL_GPIO_Init+0x2a4>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d058      	beq.n	8000b36 <HAL_GPIO_Init+0xfa>
 8000a84:	4a96      	ldr	r2, [pc, #600]	@ (8000ce0 <HAL_GPIO_Init+0x2a4>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d86f      	bhi.n	8000b6a <HAL_GPIO_Init+0x12e>
 8000a8a:	4a96      	ldr	r2, [pc, #600]	@ (8000ce4 <HAL_GPIO_Init+0x2a8>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d052      	beq.n	8000b36 <HAL_GPIO_Init+0xfa>
 8000a90:	4a94      	ldr	r2, [pc, #592]	@ (8000ce4 <HAL_GPIO_Init+0x2a8>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d869      	bhi.n	8000b6a <HAL_GPIO_Init+0x12e>
 8000a96:	4a94      	ldr	r2, [pc, #592]	@ (8000ce8 <HAL_GPIO_Init+0x2ac>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d04c      	beq.n	8000b36 <HAL_GPIO_Init+0xfa>
 8000a9c:	4a92      	ldr	r2, [pc, #584]	@ (8000ce8 <HAL_GPIO_Init+0x2ac>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d863      	bhi.n	8000b6a <HAL_GPIO_Init+0x12e>
 8000aa2:	4a92      	ldr	r2, [pc, #584]	@ (8000cec <HAL_GPIO_Init+0x2b0>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d046      	beq.n	8000b36 <HAL_GPIO_Init+0xfa>
 8000aa8:	4a90      	ldr	r2, [pc, #576]	@ (8000cec <HAL_GPIO_Init+0x2b0>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d85d      	bhi.n	8000b6a <HAL_GPIO_Init+0x12e>
 8000aae:	2b12      	cmp	r3, #18
 8000ab0:	d82a      	bhi.n	8000b08 <HAL_GPIO_Init+0xcc>
 8000ab2:	2b12      	cmp	r3, #18
 8000ab4:	d859      	bhi.n	8000b6a <HAL_GPIO_Init+0x12e>
 8000ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8000abc <HAL_GPIO_Init+0x80>)
 8000ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000abc:	08000b37 	.word	0x08000b37
 8000ac0:	08000b11 	.word	0x08000b11
 8000ac4:	08000b23 	.word	0x08000b23
 8000ac8:	08000b65 	.word	0x08000b65
 8000acc:	08000b6b 	.word	0x08000b6b
 8000ad0:	08000b6b 	.word	0x08000b6b
 8000ad4:	08000b6b 	.word	0x08000b6b
 8000ad8:	08000b6b 	.word	0x08000b6b
 8000adc:	08000b6b 	.word	0x08000b6b
 8000ae0:	08000b6b 	.word	0x08000b6b
 8000ae4:	08000b6b 	.word	0x08000b6b
 8000ae8:	08000b6b 	.word	0x08000b6b
 8000aec:	08000b6b 	.word	0x08000b6b
 8000af0:	08000b6b 	.word	0x08000b6b
 8000af4:	08000b6b 	.word	0x08000b6b
 8000af8:	08000b6b 	.word	0x08000b6b
 8000afc:	08000b6b 	.word	0x08000b6b
 8000b00:	08000b19 	.word	0x08000b19
 8000b04:	08000b2d 	.word	0x08000b2d
 8000b08:	4a79      	ldr	r2, [pc, #484]	@ (8000cf0 <HAL_GPIO_Init+0x2b4>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d013      	beq.n	8000b36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b0e:	e02c      	b.n	8000b6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	623b      	str	r3, [r7, #32]
          break;
 8000b16:	e029      	b.n	8000b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	623b      	str	r3, [r7, #32]
          break;
 8000b20:	e024      	b.n	8000b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	3308      	adds	r3, #8
 8000b28:	623b      	str	r3, [r7, #32]
          break;
 8000b2a:	e01f      	b.n	8000b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	330c      	adds	r3, #12
 8000b32:	623b      	str	r3, [r7, #32]
          break;
 8000b34:	e01a      	b.n	8000b6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d102      	bne.n	8000b44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b3e:	2304      	movs	r3, #4
 8000b40:	623b      	str	r3, [r7, #32]
          break;
 8000b42:	e013      	b.n	8000b6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d105      	bne.n	8000b58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b4c:	2308      	movs	r3, #8
 8000b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	69fa      	ldr	r2, [r7, #28]
 8000b54:	611a      	str	r2, [r3, #16]
          break;
 8000b56:	e009      	b.n	8000b6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b58:	2308      	movs	r3, #8
 8000b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	69fa      	ldr	r2, [r7, #28]
 8000b60:	615a      	str	r2, [r3, #20]
          break;
 8000b62:	e003      	b.n	8000b6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
          break;
 8000b68:	e000      	b.n	8000b6c <HAL_GPIO_Init+0x130>
          break;
 8000b6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	2bff      	cmp	r3, #255	@ 0xff
 8000b70:	d801      	bhi.n	8000b76 <HAL_GPIO_Init+0x13a>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	e001      	b.n	8000b7a <HAL_GPIO_Init+0x13e>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	2bff      	cmp	r3, #255	@ 0xff
 8000b80:	d802      	bhi.n	8000b88 <HAL_GPIO_Init+0x14c>
 8000b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	e002      	b.n	8000b8e <HAL_GPIO_Init+0x152>
 8000b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b8a:	3b08      	subs	r3, #8
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	210f      	movs	r1, #15
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	6a39      	ldr	r1, [r7, #32]
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba8:	431a      	orrs	r2, r3
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f000 80b1 	beq.w	8000d1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bbc:	4b4d      	ldr	r3, [pc, #308]	@ (8000cf4 <HAL_GPIO_Init+0x2b8>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a4c      	ldr	r2, [pc, #304]	@ (8000cf4 <HAL_GPIO_Init+0x2b8>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b4a      	ldr	r3, [pc, #296]	@ (8000cf4 <HAL_GPIO_Init+0x2b8>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bd4:	4a48      	ldr	r2, [pc, #288]	@ (8000cf8 <HAL_GPIO_Init+0x2bc>)
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd8:	089b      	lsrs	r3, r3, #2
 8000bda:	3302      	adds	r3, #2
 8000bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be4:	f003 0303 	and.w	r3, r3, #3
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	220f      	movs	r2, #15
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a40      	ldr	r2, [pc, #256]	@ (8000cfc <HAL_GPIO_Init+0x2c0>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d013      	beq.n	8000c28 <HAL_GPIO_Init+0x1ec>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a3f      	ldr	r2, [pc, #252]	@ (8000d00 <HAL_GPIO_Init+0x2c4>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d00d      	beq.n	8000c24 <HAL_GPIO_Init+0x1e8>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a3e      	ldr	r2, [pc, #248]	@ (8000d04 <HAL_GPIO_Init+0x2c8>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d007      	beq.n	8000c20 <HAL_GPIO_Init+0x1e4>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a3d      	ldr	r2, [pc, #244]	@ (8000d08 <HAL_GPIO_Init+0x2cc>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d101      	bne.n	8000c1c <HAL_GPIO_Init+0x1e0>
 8000c18:	2303      	movs	r3, #3
 8000c1a:	e006      	b.n	8000c2a <HAL_GPIO_Init+0x1ee>
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	e004      	b.n	8000c2a <HAL_GPIO_Init+0x1ee>
 8000c20:	2302      	movs	r3, #2
 8000c22:	e002      	b.n	8000c2a <HAL_GPIO_Init+0x1ee>
 8000c24:	2301      	movs	r3, #1
 8000c26:	e000      	b.n	8000c2a <HAL_GPIO_Init+0x1ee>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c2c:	f002 0203 	and.w	r2, r2, #3
 8000c30:	0092      	lsls	r2, r2, #2
 8000c32:	4093      	lsls	r3, r2
 8000c34:	68fa      	ldr	r2, [r7, #12]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c3a:	492f      	ldr	r1, [pc, #188]	@ (8000cf8 <HAL_GPIO_Init+0x2bc>)
 8000c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c3e:	089b      	lsrs	r3, r3, #2
 8000c40:	3302      	adds	r3, #2
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d006      	beq.n	8000c62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c54:	4b2d      	ldr	r3, [pc, #180]	@ (8000d0c <HAL_GPIO_Init+0x2d0>)
 8000c56:	689a      	ldr	r2, [r3, #8]
 8000c58:	492c      	ldr	r1, [pc, #176]	@ (8000d0c <HAL_GPIO_Init+0x2d0>)
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	608b      	str	r3, [r1, #8]
 8000c60:	e006      	b.n	8000c70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c62:	4b2a      	ldr	r3, [pc, #168]	@ (8000d0c <HAL_GPIO_Init+0x2d0>)
 8000c64:	689a      	ldr	r2, [r3, #8]
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	4928      	ldr	r1, [pc, #160]	@ (8000d0c <HAL_GPIO_Init+0x2d0>)
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d006      	beq.n	8000c8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c7c:	4b23      	ldr	r3, [pc, #140]	@ (8000d0c <HAL_GPIO_Init+0x2d0>)
 8000c7e:	68da      	ldr	r2, [r3, #12]
 8000c80:	4922      	ldr	r1, [pc, #136]	@ (8000d0c <HAL_GPIO_Init+0x2d0>)
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	60cb      	str	r3, [r1, #12]
 8000c88:	e006      	b.n	8000c98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c8a:	4b20      	ldr	r3, [pc, #128]	@ (8000d0c <HAL_GPIO_Init+0x2d0>)
 8000c8c:	68da      	ldr	r2, [r3, #12]
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	43db      	mvns	r3, r3
 8000c92:	491e      	ldr	r1, [pc, #120]	@ (8000d0c <HAL_GPIO_Init+0x2d0>)
 8000c94:	4013      	ands	r3, r2
 8000c96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d006      	beq.n	8000cb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ca4:	4b19      	ldr	r3, [pc, #100]	@ (8000d0c <HAL_GPIO_Init+0x2d0>)
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	4918      	ldr	r1, [pc, #96]	@ (8000d0c <HAL_GPIO_Init+0x2d0>)
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	604b      	str	r3, [r1, #4]
 8000cb0:	e006      	b.n	8000cc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cb2:	4b16      	ldr	r3, [pc, #88]	@ (8000d0c <HAL_GPIO_Init+0x2d0>)
 8000cb4:	685a      	ldr	r2, [r3, #4]
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	4914      	ldr	r1, [pc, #80]	@ (8000d0c <HAL_GPIO_Init+0x2d0>)
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d021      	beq.n	8000d10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <HAL_GPIO_Init+0x2d0>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	490e      	ldr	r1, [pc, #56]	@ (8000d0c <HAL_GPIO_Init+0x2d0>)
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	600b      	str	r3, [r1, #0]
 8000cd8:	e021      	b.n	8000d1e <HAL_GPIO_Init+0x2e2>
 8000cda:	bf00      	nop
 8000cdc:	10320000 	.word	0x10320000
 8000ce0:	10310000 	.word	0x10310000
 8000ce4:	10220000 	.word	0x10220000
 8000ce8:	10210000 	.word	0x10210000
 8000cec:	10120000 	.word	0x10120000
 8000cf0:	10110000 	.word	0x10110000
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40010000 	.word	0x40010000
 8000cfc:	40010800 	.word	0x40010800
 8000d00:	40010c00 	.word	0x40010c00
 8000d04:	40011000 	.word	0x40011000
 8000d08:	40011400 	.word	0x40011400
 8000d0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d10:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <HAL_GPIO_Init+0x304>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	43db      	mvns	r3, r3
 8000d18:	4909      	ldr	r1, [pc, #36]	@ (8000d40 <HAL_GPIO_Init+0x304>)
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d20:	3301      	adds	r3, #1
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f47f ae8e 	bne.w	8000a50 <HAL_GPIO_Init+0x14>
  }
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	372c      	adds	r7, #44	@ 0x2c
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	40010400 	.word	0x40010400

08000d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	807b      	strh	r3, [r7, #2]
 8000d50:	4613      	mov	r3, r2
 8000d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d54:	787b      	ldrb	r3, [r7, #1]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d5a:	887a      	ldrh	r2, [r7, #2]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d60:	e003      	b.n	8000d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d62:	887b      	ldrh	r3, [r7, #2]
 8000d64:	041a      	lsls	r2, r3, #16
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	611a      	str	r2, [r3, #16]
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d101      	bne.n	8000d86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e12b      	b.n	8000fde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d106      	bne.n	8000da0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff fbbc 	bl	8000518 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2224      	movs	r2, #36	@ 0x24
 8000da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f022 0201 	bic.w	r2, r2, #1
 8000db6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000dc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000dd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000dd8:	f000 ff66 	bl	8001ca8 <HAL_RCC_GetPCLK1Freq>
 8000ddc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	4a81      	ldr	r2, [pc, #516]	@ (8000fe8 <HAL_I2C_Init+0x274>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d807      	bhi.n	8000df8 <HAL_I2C_Init+0x84>
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4a80      	ldr	r2, [pc, #512]	@ (8000fec <HAL_I2C_Init+0x278>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	bf94      	ite	ls
 8000df0:	2301      	movls	r3, #1
 8000df2:	2300      	movhi	r3, #0
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	e006      	b.n	8000e06 <HAL_I2C_Init+0x92>
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4a7d      	ldr	r2, [pc, #500]	@ (8000ff0 <HAL_I2C_Init+0x27c>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	bf94      	ite	ls
 8000e00:	2301      	movls	r3, #1
 8000e02:	2300      	movhi	r3, #0
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e0e7      	b.n	8000fde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	4a78      	ldr	r2, [pc, #480]	@ (8000ff4 <HAL_I2C_Init+0x280>)
 8000e12:	fba2 2303 	umull	r2, r3, r2, r3
 8000e16:	0c9b      	lsrs	r3, r3, #18
 8000e18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	68ba      	ldr	r2, [r7, #8]
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	6a1b      	ldr	r3, [r3, #32]
 8000e34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	4a6a      	ldr	r2, [pc, #424]	@ (8000fe8 <HAL_I2C_Init+0x274>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d802      	bhi.n	8000e48 <HAL_I2C_Init+0xd4>
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	3301      	adds	r3, #1
 8000e46:	e009      	b.n	8000e5c <HAL_I2C_Init+0xe8>
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000e4e:	fb02 f303 	mul.w	r3, r2, r3
 8000e52:	4a69      	ldr	r2, [pc, #420]	@ (8000ff8 <HAL_I2C_Init+0x284>)
 8000e54:	fba2 2303 	umull	r2, r3, r2, r3
 8000e58:	099b      	lsrs	r3, r3, #6
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	6812      	ldr	r2, [r2, #0]
 8000e60:	430b      	orrs	r3, r1
 8000e62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000e6e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	495c      	ldr	r1, [pc, #368]	@ (8000fe8 <HAL_I2C_Init+0x274>)
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d819      	bhi.n	8000eb0 <HAL_I2C_Init+0x13c>
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	1e59      	subs	r1, r3, #1
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e8a:	1c59      	adds	r1, r3, #1
 8000e8c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000e90:	400b      	ands	r3, r1
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d00a      	beq.n	8000eac <HAL_I2C_Init+0x138>
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	1e59      	subs	r1, r3, #1
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000eaa:	e051      	b.n	8000f50 <HAL_I2C_Init+0x1dc>
 8000eac:	2304      	movs	r3, #4
 8000eae:	e04f      	b.n	8000f50 <HAL_I2C_Init+0x1dc>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d111      	bne.n	8000edc <HAL_I2C_Init+0x168>
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6859      	ldr	r1, [r3, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	440b      	add	r3, r1
 8000ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000eca:	3301      	adds	r3, #1
 8000ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	bf0c      	ite	eq
 8000ed4:	2301      	moveq	r3, #1
 8000ed6:	2300      	movne	r3, #0
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	e012      	b.n	8000f02 <HAL_I2C_Init+0x18e>
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	1e58      	subs	r0, r3, #1
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6859      	ldr	r1, [r3, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	440b      	add	r3, r1
 8000eea:	0099      	lsls	r1, r3, #2
 8000eec:	440b      	add	r3, r1
 8000eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	bf0c      	ite	eq
 8000efc:	2301      	moveq	r3, #1
 8000efe:	2300      	movne	r3, #0
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_I2C_Init+0x196>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e022      	b.n	8000f50 <HAL_I2C_Init+0x1dc>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10e      	bne.n	8000f30 <HAL_I2C_Init+0x1bc>
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	1e58      	subs	r0, r3, #1
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6859      	ldr	r1, [r3, #4]
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	440b      	add	r3, r1
 8000f20:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f24:	3301      	adds	r3, #1
 8000f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f2e:	e00f      	b.n	8000f50 <HAL_I2C_Init+0x1dc>
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	1e58      	subs	r0, r3, #1
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6859      	ldr	r1, [r3, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	0099      	lsls	r1, r3, #2
 8000f40:	440b      	add	r3, r1
 8000f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f46:	3301      	adds	r3, #1
 8000f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	6809      	ldr	r1, [r1, #0]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69da      	ldr	r2, [r3, #28]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6a1b      	ldr	r3, [r3, #32]
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	430a      	orrs	r2, r1
 8000f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000f7e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	6911      	ldr	r1, [r2, #16]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68d2      	ldr	r2, [r2, #12]
 8000f8a:	4311      	orrs	r1, r2
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	6812      	ldr	r2, [r2, #0]
 8000f90:	430b      	orrs	r3, r1
 8000f92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	695a      	ldr	r2, [r3, #20]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	430a      	orrs	r2, r1
 8000fae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f042 0201 	orr.w	r2, r2, #1
 8000fbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2220      	movs	r2, #32
 8000fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	000186a0 	.word	0x000186a0
 8000fec:	001e847f 	.word	0x001e847f
 8000ff0:	003d08ff 	.word	0x003d08ff
 8000ff4:	431bde83 	.word	0x431bde83
 8000ff8:	10624dd3 	.word	0x10624dd3

08000ffc <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	@ 0x28
 8001000:	af02      	add	r7, sp, #8
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	4613      	mov	r3, r2
 800100a:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800100c:	f7ff fc04 	bl	8000818 <HAL_GetTick>
 8001010:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b20      	cmp	r3, #32
 800101c:	f040 80ee 	bne.w	80011fc <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d002      	beq.n	800102c <HAL_I2C_Slave_Receive+0x30>
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d101      	bne.n	8001030 <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e0e6      	b.n	80011fe <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001036:	2b01      	cmp	r3, #1
 8001038:	d101      	bne.n	800103e <HAL_I2C_Slave_Receive+0x42>
 800103a:	2302      	movs	r3, #2
 800103c:	e0df      	b.n	80011fe <HAL_I2C_Slave_Receive+0x202>
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2201      	movs	r2, #1
 8001042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	2b01      	cmp	r3, #1
 8001052:	d007      	beq.n	8001064 <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f042 0201 	orr.w	r2, r2, #1
 8001062:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001072:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2222      	movs	r2, #34	@ 0x22
 8001078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2220      	movs	r2, #32
 8001080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2200      	movs	r2, #0
 8001088:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	88fa      	ldrh	r2, [r7, #6]
 8001094:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800109a:	b29a      	uxth	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4a59      	ldr	r2, [pc, #356]	@ (8001208 <HAL_I2C_Slave_Receive+0x20c>)
 80010a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80010b4:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	2200      	movs	r2, #0
 80010be:	4953      	ldr	r1, [pc, #332]	@ (800120c <HAL_I2C_Slave_Receive+0x210>)
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f000 f8a5 	bl	8001210 <I2C_WaitOnFlagUntilTimeout>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e096      	b.n	80011fe <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	61bb      	str	r3, [r7, #24]
 80010e4:	69bb      	ldr	r3, [r7, #24]

    while (hi2c->XferSize > 0U)
 80010e6:	e04e      	b.n	8001186 <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010e8:	69fa      	ldr	r2, [r7, #28]
 80010ea:	6839      	ldr	r1, [r7, #0]
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f000 f94d 	bl	800138c <I2C_WaitOnRXNEFlagUntilTimeout>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d009      	beq.n	800110c <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001106:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e078      	b.n	80011fe <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	691a      	ldr	r2, [r3, #16]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001128:	3b01      	subs	r3, #1
 800112a:	b29a      	uxth	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001134:	b29b      	uxth	r3, r3
 8001136:	3b01      	subs	r3, #1
 8001138:	b29a      	uxth	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	2b04      	cmp	r3, #4
 800114a:	d11c      	bne.n	8001186 <HAL_I2C_Slave_Receive+0x18a>
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001150:	2b00      	cmp	r3, #0
 8001152:	d018      	beq.n	8001186 <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	691a      	ldr	r2, [r3, #16]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001170:	3b01      	subs	r3, #1
 8001172:	b29a      	uxth	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800117c:	b29b      	uxth	r3, r3
 800117e:	3b01      	subs	r3, #1
 8001180:	b29a      	uxth	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1ac      	bne.n	80010e8 <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800118e:	69fa      	ldr	r2, [r7, #28]
 8001190:	6839      	ldr	r1, [r7, #0]
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f000 f8b6 	bl	8001304 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d009      	beq.n	80011b2 <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011ac:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e025      	b.n	80011fe <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f042 0201 	orr.w	r2, r2, #1
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	697b      	ldr	r3, [r7, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2220      	movs	r2, #32
 80011e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80011f8:	2300      	movs	r3, #0
 80011fa:	e000      	b.n	80011fe <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 80011fc:	2302      	movs	r3, #2
  }
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3720      	adds	r7, #32
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	ffff0000 	.word	0xffff0000
 800120c:	00010002 	.word	0x00010002

08001210 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	4613      	mov	r3, r2
 800121e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001220:	e048      	b.n	80012b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001228:	d044      	beq.n	80012b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800122a:	f7ff faf5 	bl	8000818 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	429a      	cmp	r2, r3
 8001238:	d302      	bcc.n	8001240 <I2C_WaitOnFlagUntilTimeout+0x30>
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d139      	bne.n	80012b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	0c1b      	lsrs	r3, r3, #16
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b01      	cmp	r3, #1
 8001248:	d10d      	bne.n	8001266 <I2C_WaitOnFlagUntilTimeout+0x56>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	43da      	mvns	r2, r3
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	4013      	ands	r3, r2
 8001256:	b29b      	uxth	r3, r3
 8001258:	2b00      	cmp	r3, #0
 800125a:	bf0c      	ite	eq
 800125c:	2301      	moveq	r3, #1
 800125e:	2300      	movne	r3, #0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	461a      	mov	r2, r3
 8001264:	e00c      	b.n	8001280 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	43da      	mvns	r2, r3
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	4013      	ands	r3, r2
 8001272:	b29b      	uxth	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf0c      	ite	eq
 8001278:	2301      	moveq	r3, #1
 800127a:	2300      	movne	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	461a      	mov	r2, r3
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	429a      	cmp	r2, r3
 8001284:	d116      	bne.n	80012b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2200      	movs	r2, #0
 800128a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2220      	movs	r2, #32
 8001290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a0:	f043 0220 	orr.w	r2, r3, #32
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e023      	b.n	80012fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	0c1b      	lsrs	r3, r3, #16
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d10d      	bne.n	80012da <I2C_WaitOnFlagUntilTimeout+0xca>
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	43da      	mvns	r2, r3
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	4013      	ands	r3, r2
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bf0c      	ite	eq
 80012d0:	2301      	moveq	r3, #1
 80012d2:	2300      	movne	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	461a      	mov	r2, r3
 80012d8:	e00c      	b.n	80012f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	43da      	mvns	r2, r3
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	4013      	ands	r3, r2
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	bf0c      	ite	eq
 80012ec:	2301      	moveq	r3, #1
 80012ee:	2300      	movne	r3, #0
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d093      	beq.n	8001222 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001310:	e030      	b.n	8001374 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f000 f897 	bl	8001446 <I2C_IsAcknowledgeFailed>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e030      	b.n	8001384 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001322:	f7ff fa79 	bl	8000818 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	68ba      	ldr	r2, [r7, #8]
 800132e:	429a      	cmp	r2, r3
 8001330:	d302      	bcc.n	8001338 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d11d      	bne.n	8001374 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	f003 0310 	and.w	r3, r3, #16
 8001342:	2b10      	cmp	r3, #16
 8001344:	d016      	beq.n	8001374 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2200      	movs	r2, #0
 800134a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2220      	movs	r2, #32
 8001350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001360:	f043 0220 	orr.w	r2, r3, #32
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e007      	b.n	8001384 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	f003 0310 	and.w	r3, r3, #16
 800137e:	2b10      	cmp	r3, #16
 8001380:	d1c7      	bne.n	8001312 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001398:	e049      	b.n	800142e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	f003 0310 	and.w	r3, r3, #16
 80013a4:	2b10      	cmp	r3, #16
 80013a6:	d119      	bne.n	80013dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f06f 0210 	mvn.w	r2, #16
 80013b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2200      	movs	r2, #0
 80013b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2220      	movs	r2, #32
 80013bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e030      	b.n	800143e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013dc:	f7ff fa1c 	bl	8000818 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d302      	bcc.n	80013f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d11d      	bne.n	800142e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013fc:	2b40      	cmp	r3, #64	@ 0x40
 80013fe:	d016      	beq.n	800142e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2200      	movs	r2, #0
 8001404:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2220      	movs	r2, #32
 800140a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141a:	f043 0220 	orr.w	r2, r3, #32
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e007      	b.n	800143e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001438:	2b40      	cmp	r3, #64	@ 0x40
 800143a:	d1ae      	bne.n	800139a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800145c:	d11b      	bne.n	8001496 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001466:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2220      	movs	r2, #32
 8001472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001482:	f043 0204 	orr.w	r2, r3, #4
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr
	...

080014a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e272      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 8087 	beq.w	80015d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014c4:	4b92      	ldr	r3, [pc, #584]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 030c 	and.w	r3, r3, #12
 80014cc:	2b04      	cmp	r3, #4
 80014ce:	d00c      	beq.n	80014ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014d0:	4b8f      	ldr	r3, [pc, #572]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 030c 	and.w	r3, r3, #12
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d112      	bne.n	8001502 <HAL_RCC_OscConfig+0x5e>
 80014dc:	4b8c      	ldr	r3, [pc, #560]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014e8:	d10b      	bne.n	8001502 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ea:	4b89      	ldr	r3, [pc, #548]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d06c      	beq.n	80015d0 <HAL_RCC_OscConfig+0x12c>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d168      	bne.n	80015d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e24c      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800150a:	d106      	bne.n	800151a <HAL_RCC_OscConfig+0x76>
 800150c:	4b80      	ldr	r3, [pc, #512]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a7f      	ldr	r2, [pc, #508]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001512:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	e02e      	b.n	8001578 <HAL_RCC_OscConfig+0xd4>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10c      	bne.n	800153c <HAL_RCC_OscConfig+0x98>
 8001522:	4b7b      	ldr	r3, [pc, #492]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a7a      	ldr	r2, [pc, #488]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001528:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	4b78      	ldr	r3, [pc, #480]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a77      	ldr	r2, [pc, #476]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001534:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e01d      	b.n	8001578 <HAL_RCC_OscConfig+0xd4>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0xbc>
 8001546:	4b72      	ldr	r3, [pc, #456]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a71      	ldr	r2, [pc, #452]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 800154c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b6f      	ldr	r3, [pc, #444]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a6e      	ldr	r2, [pc, #440]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e00b      	b.n	8001578 <HAL_RCC_OscConfig+0xd4>
 8001560:	4b6b      	ldr	r3, [pc, #428]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a6a      	ldr	r2, [pc, #424]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4b68      	ldr	r3, [pc, #416]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a67      	ldr	r2, [pc, #412]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001572:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001576:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d013      	beq.n	80015a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff f94a 	bl	8000818 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff f946 	bl	8000818 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	@ 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e200      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	4b5d      	ldr	r3, [pc, #372]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0xe4>
 80015a6:	e014      	b.n	80015d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff f936 	bl	8000818 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b0:	f7ff f932 	bl	8000818 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	@ 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e1ec      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c2:	4b53      	ldr	r3, [pc, #332]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x10c>
 80015ce:	e000      	b.n	80015d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d063      	beq.n	80016a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015de:	4b4c      	ldr	r3, [pc, #304]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00b      	beq.n	8001602 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015ea:	4b49      	ldr	r3, [pc, #292]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d11c      	bne.n	8001630 <HAL_RCC_OscConfig+0x18c>
 80015f6:	4b46      	ldr	r3, [pc, #280]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d116      	bne.n	8001630 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001602:	4b43      	ldr	r3, [pc, #268]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d005      	beq.n	800161a <HAL_RCC_OscConfig+0x176>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d001      	beq.n	800161a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e1c0      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161a:	4b3d      	ldr	r3, [pc, #244]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4939      	ldr	r1, [pc, #228]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 800162a:	4313      	orrs	r3, r2
 800162c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162e:	e03a      	b.n	80016a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d020      	beq.n	800167a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001638:	4b36      	ldr	r3, [pc, #216]	@ (8001714 <HAL_RCC_OscConfig+0x270>)
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163e:	f7ff f8eb 	bl	8000818 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001646:	f7ff f8e7 	bl	8000818 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e1a1      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001658:	4b2d      	ldr	r3, [pc, #180]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001664:	4b2a      	ldr	r3, [pc, #168]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4927      	ldr	r1, [pc, #156]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001674:	4313      	orrs	r3, r2
 8001676:	600b      	str	r3, [r1, #0]
 8001678:	e015      	b.n	80016a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167a:	4b26      	ldr	r3, [pc, #152]	@ (8001714 <HAL_RCC_OscConfig+0x270>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff f8ca 	bl	8000818 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001688:	f7ff f8c6 	bl	8000818 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e180      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169a:	4b1d      	ldr	r3, [pc, #116]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d03a      	beq.n	8001728 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d019      	beq.n	80016ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ba:	4b17      	ldr	r3, [pc, #92]	@ (8001718 <HAL_RCC_OscConfig+0x274>)
 80016bc:	2201      	movs	r2, #1
 80016be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c0:	f7ff f8aa 	bl	8000818 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c8:	f7ff f8a6 	bl	8000818 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e160      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016da:	4b0d      	ldr	r3, [pc, #52]	@ (8001710 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016e6:	2001      	movs	r0, #1
 80016e8:	f000 fb06 	bl	8001cf8 <RCC_Delay>
 80016ec:	e01c      	b.n	8001728 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001718 <HAL_RCC_OscConfig+0x274>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f4:	f7ff f890 	bl	8000818 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016fa:	e00f      	b.n	800171c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016fc:	f7ff f88c 	bl	8000818 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d908      	bls.n	800171c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e146      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000
 8001714:	42420000 	.word	0x42420000
 8001718:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800171c:	4b92      	ldr	r3, [pc, #584]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 800171e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1e9      	bne.n	80016fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 80a6 	beq.w	8001882 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001736:	2300      	movs	r3, #0
 8001738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800173a:	4b8b      	ldr	r3, [pc, #556]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10d      	bne.n	8001762 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	4b88      	ldr	r3, [pc, #544]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	4a87      	ldr	r2, [pc, #540]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001750:	61d3      	str	r3, [r2, #28]
 8001752:	4b85      	ldr	r3, [pc, #532]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800175e:	2301      	movs	r3, #1
 8001760:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001762:	4b82      	ldr	r3, [pc, #520]	@ (800196c <HAL_RCC_OscConfig+0x4c8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800176a:	2b00      	cmp	r3, #0
 800176c:	d118      	bne.n	80017a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176e:	4b7f      	ldr	r3, [pc, #508]	@ (800196c <HAL_RCC_OscConfig+0x4c8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a7e      	ldr	r2, [pc, #504]	@ (800196c <HAL_RCC_OscConfig+0x4c8>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177a:	f7ff f84d 	bl	8000818 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001782:	f7ff f849 	bl	8000818 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b64      	cmp	r3, #100	@ 0x64
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e103      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001794:	4b75      	ldr	r3, [pc, #468]	@ (800196c <HAL_RCC_OscConfig+0x4c8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d106      	bne.n	80017b6 <HAL_RCC_OscConfig+0x312>
 80017a8:	4b6f      	ldr	r3, [pc, #444]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4a6e      	ldr	r2, [pc, #440]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6213      	str	r3, [r2, #32]
 80017b4:	e02d      	b.n	8001812 <HAL_RCC_OscConfig+0x36e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x334>
 80017be:	4b6a      	ldr	r3, [pc, #424]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	4a69      	ldr	r2, [pc, #420]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	6213      	str	r3, [r2, #32]
 80017ca:	4b67      	ldr	r3, [pc, #412]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	4a66      	ldr	r2, [pc, #408]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	f023 0304 	bic.w	r3, r3, #4
 80017d4:	6213      	str	r3, [r2, #32]
 80017d6:	e01c      	b.n	8001812 <HAL_RCC_OscConfig+0x36e>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	2b05      	cmp	r3, #5
 80017de:	d10c      	bne.n	80017fa <HAL_RCC_OscConfig+0x356>
 80017e0:	4b61      	ldr	r3, [pc, #388]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	4a60      	ldr	r2, [pc, #384]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	f043 0304 	orr.w	r3, r3, #4
 80017ea:	6213      	str	r3, [r2, #32]
 80017ec:	4b5e      	ldr	r3, [pc, #376]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	4a5d      	ldr	r2, [pc, #372]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	6213      	str	r3, [r2, #32]
 80017f8:	e00b      	b.n	8001812 <HAL_RCC_OscConfig+0x36e>
 80017fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	4a5a      	ldr	r2, [pc, #360]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	6213      	str	r3, [r2, #32]
 8001806:	4b58      	ldr	r3, [pc, #352]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	4a57      	ldr	r2, [pc, #348]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 800180c:	f023 0304 	bic.w	r3, r3, #4
 8001810:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d015      	beq.n	8001846 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181a:	f7fe fffd 	bl	8000818 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001820:	e00a      	b.n	8001838 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001822:	f7fe fff9 	bl	8000818 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001830:	4293      	cmp	r3, r2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e0b1      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001838:	4b4b      	ldr	r3, [pc, #300]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0ee      	beq.n	8001822 <HAL_RCC_OscConfig+0x37e>
 8001844:	e014      	b.n	8001870 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001846:	f7fe ffe7 	bl	8000818 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800184c:	e00a      	b.n	8001864 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184e:	f7fe ffe3 	bl	8000818 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800185c:	4293      	cmp	r3, r2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e09b      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001864:	4b40      	ldr	r3, [pc, #256]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1ee      	bne.n	800184e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001870:	7dfb      	ldrb	r3, [r7, #23]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d105      	bne.n	8001882 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001876:	4b3c      	ldr	r3, [pc, #240]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	4a3b      	ldr	r2, [pc, #236]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 800187c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001880:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 8087 	beq.w	800199a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800188c:	4b36      	ldr	r3, [pc, #216]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b08      	cmp	r3, #8
 8001896:	d061      	beq.n	800195c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	2b02      	cmp	r3, #2
 800189e:	d146      	bne.n	800192e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a0:	4b33      	ldr	r3, [pc, #204]	@ (8001970 <HAL_RCC_OscConfig+0x4cc>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a6:	f7fe ffb7 	bl	8000818 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ae:	f7fe ffb3 	bl	8000818 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e06d      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c0:	4b29      	ldr	r3, [pc, #164]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1f0      	bne.n	80018ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018d4:	d108      	bne.n	80018e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018d6:	4b24      	ldr	r3, [pc, #144]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	4921      	ldr	r1, [pc, #132]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a19      	ldr	r1, [r3, #32]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f8:	430b      	orrs	r3, r1
 80018fa:	491b      	ldr	r1, [pc, #108]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001900:	4b1b      	ldr	r3, [pc, #108]	@ (8001970 <HAL_RCC_OscConfig+0x4cc>)
 8001902:	2201      	movs	r2, #1
 8001904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7fe ff87 	bl	8000818 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190e:	f7fe ff83 	bl	8000818 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e03d      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001920:	4b11      	ldr	r3, [pc, #68]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x46a>
 800192c:	e035      	b.n	800199a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192e:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <HAL_RCC_OscConfig+0x4cc>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7fe ff70 	bl	8000818 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193c:	f7fe ff6c 	bl	8000818 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e026      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800194e:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_RCC_OscConfig+0x4c4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x498>
 800195a:	e01e      	b.n	800199a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d107      	bne.n	8001974 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e019      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
 8001968:	40021000 	.word	0x40021000
 800196c:	40007000 	.word	0x40007000
 8001970:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001974:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <HAL_RCC_OscConfig+0x500>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	429a      	cmp	r2, r3
 8001986:	d106      	bne.n	8001996 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001992:	429a      	cmp	r2, r3
 8001994:	d001      	beq.n	800199a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40021000 	.word	0x40021000

080019a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0d0      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d910      	bls.n	80019ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b67      	ldr	r3, [pc, #412]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 0207 	bic.w	r2, r3, #7
 80019d2:	4965      	ldr	r1, [pc, #404]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b63      	ldr	r3, [pc, #396]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0b8      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d020      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a04:	4b59      	ldr	r3, [pc, #356]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	4a58      	ldr	r2, [pc, #352]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a1c:	4b53      	ldr	r3, [pc, #332]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	4a52      	ldr	r2, [pc, #328]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	4b50      	ldr	r3, [pc, #320]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	494d      	ldr	r1, [pc, #308]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d040      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	4b47      	ldr	r3, [pc, #284]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d115      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e07f      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a66:	4b41      	ldr	r3, [pc, #260]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e073      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a76:	4b3d      	ldr	r3, [pc, #244]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e06b      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a86:	4b39      	ldr	r3, [pc, #228]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f023 0203 	bic.w	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4936      	ldr	r1, [pc, #216]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a98:	f7fe febe 	bl	8000818 <HAL_GetTick>
 8001a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa0:	f7fe feba 	bl	8000818 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e053      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 020c 	and.w	r2, r3, #12
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d1eb      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b27      	ldr	r3, [pc, #156]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d210      	bcs.n	8001af8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b24      	ldr	r3, [pc, #144]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 0207 	bic.w	r2, r3, #7
 8001ade:	4922      	ldr	r1, [pc, #136]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	4b20      	ldr	r3, [pc, #128]	@ (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e032      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d008      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b04:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4916      	ldr	r1, [pc, #88]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d009      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b22:	4b12      	ldr	r3, [pc, #72]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	490e      	ldr	r1, [pc, #56]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b36:	f000 f859 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	490a      	ldr	r1, [pc, #40]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001b48:	5ccb      	ldrb	r3, [r1, r3]
 8001b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4e:	4a09      	ldr	r2, [pc, #36]	@ (8001b74 <HAL_RCC_ClockConfig+0x1cc>)
 8001b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b52:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <HAL_RCC_ClockConfig+0x1d0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fe1c 	bl	8000794 <HAL_InitTick>

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40022000 	.word	0x40022000
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	08002ce4 	.word	0x08002ce4
 8001b74:	20000000 	.word	0x20000000
 8001b78:	20000004 	.word	0x20000004

08001b7c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	@ 0x28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8001b88:	f107 0318 	add.w	r3, r7, #24
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio.Pull      = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8001ba2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ba6:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <HAL_RCC_MCOConfig+0x68>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	4a0d      	ldr	r2, [pc, #52]	@ (8001be4 <HAL_RCC_MCOConfig+0x68>)
 8001bae:	f043 0304 	orr.w	r3, r3, #4
 8001bb2:	6193      	str	r3, [r2, #24]
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <HAL_RCC_MCOConfig+0x68>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001bc0:	f107 0318 	add.w	r3, r7, #24
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4808      	ldr	r0, [pc, #32]	@ (8001be8 <HAL_RCC_MCOConfig+0x6c>)
 8001bc8:	f7fe ff38 	bl	8000a3c <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8001bcc:	4b05      	ldr	r3, [pc, #20]	@ (8001be4 <HAL_RCC_MCOConfig+0x68>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8001bd4:	4903      	ldr	r1, [pc, #12]	@ (8001be4 <HAL_RCC_MCOConfig+0x68>)
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	604b      	str	r3, [r1, #4]
}
 8001bdc:	bf00      	nop
 8001bde:	3728      	adds	r7, #40	@ 0x28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40010800 	.word	0x40010800

08001bec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c06:	4b1e      	ldr	r3, [pc, #120]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d002      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0x30>
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d003      	beq.n	8001c22 <HAL_RCC_GetSysClockFreq+0x36>
 8001c1a:	e027      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c1c:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c1e:	613b      	str	r3, [r7, #16]
      break;
 8001c20:	e027      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	0c9b      	lsrs	r3, r3, #18
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	4a17      	ldr	r2, [pc, #92]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c2c:	5cd3      	ldrb	r3, [r2, r3]
 8001c2e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d010      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c3a:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	0c5b      	lsrs	r3, r3, #17
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	4a11      	ldr	r2, [pc, #68]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c46:	5cd3      	ldrb	r3, [r2, r3]
 8001c48:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c4e:	fb03 f202 	mul.w	r2, r3, r2
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	e004      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c60:	fb02 f303 	mul.w	r3, r2, r3
 8001c64:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	613b      	str	r3, [r7, #16]
      break;
 8001c6a:	e002      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c6c:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c6e:	613b      	str	r3, [r7, #16]
      break;
 8001c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c72:	693b      	ldr	r3, [r7, #16]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	371c      	adds	r7, #28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40021000 	.word	0x40021000
 8001c84:	007a1200 	.word	0x007a1200
 8001c88:	08002cfc 	.word	0x08002cfc
 8001c8c:	08002d0c 	.word	0x08002d0c
 8001c90:	003d0900 	.word	0x003d0900

08001c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c98:	4b02      	ldr	r3, [pc, #8]	@ (8001ca4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	20000000 	.word	0x20000000

08001ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cac:	f7ff fff2 	bl	8001c94 <HAL_RCC_GetHCLKFreq>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	4b05      	ldr	r3, [pc, #20]	@ (8001cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	0a1b      	lsrs	r3, r3, #8
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	4903      	ldr	r1, [pc, #12]	@ (8001ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cbe:	5ccb      	ldrb	r3, [r1, r3]
 8001cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	08002cf4 	.word	0x08002cf4

08001cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cd4:	f7ff ffde 	bl	8001c94 <HAL_RCC_GetHCLKFreq>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	0adb      	lsrs	r3, r3, #11
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	4903      	ldr	r1, [pc, #12]	@ (8001cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ce6:	5ccb      	ldrb	r3, [r1, r3]
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	08002cf4 	.word	0x08002cf4

08001cf8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d00:	4b0a      	ldr	r3, [pc, #40]	@ (8001d2c <RCC_Delay+0x34>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0a      	ldr	r2, [pc, #40]	@ (8001d30 <RCC_Delay+0x38>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	0a5b      	lsrs	r3, r3, #9
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	fb02 f303 	mul.w	r3, r2, r3
 8001d12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d14:	bf00      	nop
  }
  while (Delay --);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1e5a      	subs	r2, r3, #1
 8001d1a:	60fa      	str	r2, [r7, #12]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1f9      	bne.n	8001d14 <RCC_Delay+0x1c>
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	10624dd3 	.word	0x10624dd3

08001d34 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d07d      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001d50:	2300      	movs	r3, #0
 8001d52:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d54:	4b4f      	ldr	r3, [pc, #316]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10d      	bne.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d60:	4b4c      	ldr	r3, [pc, #304]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	4a4b      	ldr	r2, [pc, #300]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d6a:	61d3      	str	r3, [r2, #28]
 8001d6c:	4b49      	ldr	r3, [pc, #292]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7c:	4b46      	ldr	r3, [pc, #280]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d118      	bne.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d88:	4b43      	ldr	r3, [pc, #268]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a42      	ldr	r2, [pc, #264]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d94:	f7fe fd40 	bl	8000818 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9a:	e008      	b.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9c:	f7fe fd3c 	bl	8000818 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	@ 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e06d      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dae:	4b3a      	ldr	r3, [pc, #232]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dba:	4b36      	ldr	r3, [pc, #216]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dc2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d02e      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d027      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dd8:	4b2e      	ldr	r3, [pc, #184]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001de0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001de2:	4b2e      	ldr	r3, [pc, #184]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001de8:	4b2c      	ldr	r3, [pc, #176]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001dee:	4a29      	ldr	r2, [pc, #164]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d014      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfe:	f7fe fd0b 	bl	8000818 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e04:	e00a      	b.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e06:	f7fe fd07 	bl	8000818 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e036      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0ee      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e28:	4b1a      	ldr	r3, [pc, #104]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	4917      	ldr	r1, [pc, #92]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e3a:	7dfb      	ldrb	r3, [r7, #23]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d105      	bne.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e40:	4b14      	ldr	r3, [pc, #80]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	4a13      	ldr	r2, [pc, #76]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d008      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e58:	4b0e      	ldr	r3, [pc, #56]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	490b      	ldr	r1, [pc, #44]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d008      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e76:	4b07      	ldr	r3, [pc, #28]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	4904      	ldr	r1, [pc, #16]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40007000 	.word	0x40007000
 8001e9c:	42420440 	.word	0x42420440

08001ea0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e042      	b.n	8001f38 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7fe fb76 	bl	80005b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2224      	movs	r2, #36	@ 0x24
 8001ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ee2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f971 	bl	80021cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ef8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	695a      	ldr	r2, [r3, #20]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	@ 0x28
 8001f44:	af02      	add	r7, sp, #8
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	603b      	str	r3, [r7, #0]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b20      	cmp	r3, #32
 8001f5e:	d175      	bne.n	800204c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <HAL_UART_Transmit+0x2c>
 8001f66:	88fb      	ldrh	r3, [r7, #6]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e06e      	b.n	800204e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2221      	movs	r2, #33	@ 0x21
 8001f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f7e:	f7fe fc4b 	bl	8000818 <HAL_GetTick>
 8001f82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	88fa      	ldrh	r2, [r7, #6]
 8001f88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	88fa      	ldrh	r2, [r7, #6]
 8001f8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f98:	d108      	bne.n	8001fac <HAL_UART_Transmit+0x6c>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d104      	bne.n	8001fac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	61bb      	str	r3, [r7, #24]
 8001faa:	e003      	b.n	8001fb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fb4:	e02e      	b.n	8002014 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2180      	movs	r1, #128	@ 0x80
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 f848 	bl	8002056 <UART_WaitOnFlagUntilTimeout>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e03a      	b.n	800204e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10b      	bne.n	8001ff6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	61bb      	str	r3, [r7, #24]
 8001ff4:	e007      	b.n	8002006 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	781a      	ldrb	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	3301      	adds	r3, #1
 8002004:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800200a:	b29b      	uxth	r3, r3
 800200c:	3b01      	subs	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002018:	b29b      	uxth	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1cb      	bne.n	8001fb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2200      	movs	r2, #0
 8002026:	2140      	movs	r1, #64	@ 0x40
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 f814 	bl	8002056 <UART_WaitOnFlagUntilTimeout>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e006      	b.n	800204e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	e000      	b.n	800204e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800204c:	2302      	movs	r3, #2
  }
}
 800204e:	4618      	mov	r0, r3
 8002050:	3720      	adds	r7, #32
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b086      	sub	sp, #24
 800205a:	af00      	add	r7, sp, #0
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	603b      	str	r3, [r7, #0]
 8002062:	4613      	mov	r3, r2
 8002064:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002066:	e03b      	b.n	80020e0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002068:	6a3b      	ldr	r3, [r7, #32]
 800206a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206e:	d037      	beq.n	80020e0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002070:	f7fe fbd2 	bl	8000818 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	6a3a      	ldr	r2, [r7, #32]
 800207c:	429a      	cmp	r2, r3
 800207e:	d302      	bcc.n	8002086 <UART_WaitOnFlagUntilTimeout+0x30>
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e03a      	b.n	8002100 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d023      	beq.n	80020e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2b80      	cmp	r3, #128	@ 0x80
 800209c:	d020      	beq.n	80020e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	2b40      	cmp	r3, #64	@ 0x40
 80020a2:	d01d      	beq.n	80020e0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d116      	bne.n	80020e0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 f81d 	bl	8002108 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2208      	movs	r2, #8
 80020d2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e00f      	b.n	8002100 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	4013      	ands	r3, r2
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	bf0c      	ite	eq
 80020f0:	2301      	moveq	r3, #1
 80020f2:	2300      	movne	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d0b4      	beq.n	8002068 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002108:	b480      	push	{r7}
 800210a:	b095      	sub	sp, #84	@ 0x54
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	330c      	adds	r3, #12
 8002116:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800211a:	e853 3f00 	ldrex	r3, [r3]
 800211e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002122:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002126:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	330c      	adds	r3, #12
 800212e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002130:	643a      	str	r2, [r7, #64]	@ 0x40
 8002132:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002134:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002136:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002138:	e841 2300 	strex	r3, r2, [r1]
 800213c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800213e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1e5      	bne.n	8002110 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	3314      	adds	r3, #20
 800214a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800214c:	6a3b      	ldr	r3, [r7, #32]
 800214e:	e853 3f00 	ldrex	r3, [r3]
 8002152:	61fb      	str	r3, [r7, #28]
   return(result);
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f023 0301 	bic.w	r3, r3, #1
 800215a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	3314      	adds	r3, #20
 8002162:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002164:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002166:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002168:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800216a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800216c:	e841 2300 	strex	r3, r2, [r1]
 8002170:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1e5      	bne.n	8002144 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217c:	2b01      	cmp	r3, #1
 800217e:	d119      	bne.n	80021b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	330c      	adds	r3, #12
 8002186:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	e853 3f00 	ldrex	r3, [r3]
 800218e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	f023 0310 	bic.w	r3, r3, #16
 8002196:	647b      	str	r3, [r7, #68]	@ 0x44
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	330c      	adds	r3, #12
 800219e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80021a0:	61ba      	str	r2, [r7, #24]
 80021a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021a4:	6979      	ldr	r1, [r7, #20]
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	e841 2300 	strex	r3, r2, [r1]
 80021ac:	613b      	str	r3, [r7, #16]
   return(result);
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1e5      	bne.n	8002180 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2220      	movs	r2, #32
 80021b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80021c2:	bf00      	nop
 80021c4:	3754      	adds	r7, #84	@ 0x54
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr

080021cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002206:	f023 030c 	bic.w	r3, r3, #12
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6812      	ldr	r2, [r2, #0]
 800220e:	68b9      	ldr	r1, [r7, #8]
 8002210:	430b      	orrs	r3, r1
 8002212:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699a      	ldr	r2, [r3, #24]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a2c      	ldr	r2, [pc, #176]	@ (80022e0 <UART_SetConfig+0x114>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d103      	bne.n	800223c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002234:	f7ff fd4c 	bl	8001cd0 <HAL_RCC_GetPCLK2Freq>
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	e002      	b.n	8002242 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800223c:	f7ff fd34 	bl	8001ca8 <HAL_RCC_GetPCLK1Freq>
 8002240:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	009a      	lsls	r2, r3, #2
 800224c:	441a      	add	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	fbb2 f3f3 	udiv	r3, r2, r3
 8002258:	4a22      	ldr	r2, [pc, #136]	@ (80022e4 <UART_SetConfig+0x118>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	095b      	lsrs	r3, r3, #5
 8002260:	0119      	lsls	r1, r3, #4
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	009a      	lsls	r2, r3, #2
 800226c:	441a      	add	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	fbb2 f2f3 	udiv	r2, r2, r3
 8002278:	4b1a      	ldr	r3, [pc, #104]	@ (80022e4 <UART_SetConfig+0x118>)
 800227a:	fba3 0302 	umull	r0, r3, r3, r2
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	2064      	movs	r0, #100	@ 0x64
 8002282:	fb00 f303 	mul.w	r3, r0, r3
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	3332      	adds	r3, #50	@ 0x32
 800228c:	4a15      	ldr	r2, [pc, #84]	@ (80022e4 <UART_SetConfig+0x118>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002298:	4419      	add	r1, r3
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	009a      	lsls	r2, r3, #2
 80022a4:	441a      	add	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80022b0:	4b0c      	ldr	r3, [pc, #48]	@ (80022e4 <UART_SetConfig+0x118>)
 80022b2:	fba3 0302 	umull	r0, r3, r3, r2
 80022b6:	095b      	lsrs	r3, r3, #5
 80022b8:	2064      	movs	r0, #100	@ 0x64
 80022ba:	fb00 f303 	mul.w	r3, r0, r3
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	3332      	adds	r3, #50	@ 0x32
 80022c4:	4a07      	ldr	r2, [pc, #28]	@ (80022e4 <UART_SetConfig+0x118>)
 80022c6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	f003 020f 	and.w	r2, r3, #15
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	440a      	add	r2, r1
 80022d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80022d8:	bf00      	nop
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40013800 	.word	0x40013800
 80022e4:	51eb851f 	.word	0x51eb851f

080022e8 <sniprintf>:
 80022e8:	b40c      	push	{r2, r3}
 80022ea:	b530      	push	{r4, r5, lr}
 80022ec:	4b17      	ldr	r3, [pc, #92]	@ (800234c <sniprintf+0x64>)
 80022ee:	1e0c      	subs	r4, r1, #0
 80022f0:	681d      	ldr	r5, [r3, #0]
 80022f2:	b09d      	sub	sp, #116	@ 0x74
 80022f4:	da08      	bge.n	8002308 <sniprintf+0x20>
 80022f6:	238b      	movs	r3, #139	@ 0x8b
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	602b      	str	r3, [r5, #0]
 80022fe:	b01d      	add	sp, #116	@ 0x74
 8002300:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002304:	b002      	add	sp, #8
 8002306:	4770      	bx	lr
 8002308:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800230c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002310:	bf0c      	ite	eq
 8002312:	4623      	moveq	r3, r4
 8002314:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002318:	9304      	str	r3, [sp, #16]
 800231a:	9307      	str	r3, [sp, #28]
 800231c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002320:	9002      	str	r0, [sp, #8]
 8002322:	9006      	str	r0, [sp, #24]
 8002324:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002328:	4628      	mov	r0, r5
 800232a:	ab21      	add	r3, sp, #132	@ 0x84
 800232c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800232e:	a902      	add	r1, sp, #8
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	f000 f993 	bl	800265c <_svfiprintf_r>
 8002336:	1c43      	adds	r3, r0, #1
 8002338:	bfbc      	itt	lt
 800233a:	238b      	movlt	r3, #139	@ 0x8b
 800233c:	602b      	strlt	r3, [r5, #0]
 800233e:	2c00      	cmp	r4, #0
 8002340:	d0dd      	beq.n	80022fe <sniprintf+0x16>
 8002342:	2200      	movs	r2, #0
 8002344:	9b02      	ldr	r3, [sp, #8]
 8002346:	701a      	strb	r2, [r3, #0]
 8002348:	e7d9      	b.n	80022fe <sniprintf+0x16>
 800234a:	bf00      	nop
 800234c:	2000000c 	.word	0x2000000c

08002350 <memset>:
 8002350:	4603      	mov	r3, r0
 8002352:	4402      	add	r2, r0
 8002354:	4293      	cmp	r3, r2
 8002356:	d100      	bne.n	800235a <memset+0xa>
 8002358:	4770      	bx	lr
 800235a:	f803 1b01 	strb.w	r1, [r3], #1
 800235e:	e7f9      	b.n	8002354 <memset+0x4>

08002360 <__errno>:
 8002360:	4b01      	ldr	r3, [pc, #4]	@ (8002368 <__errno+0x8>)
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	2000000c 	.word	0x2000000c

0800236c <__libc_init_array>:
 800236c:	b570      	push	{r4, r5, r6, lr}
 800236e:	2600      	movs	r6, #0
 8002370:	4d0c      	ldr	r5, [pc, #48]	@ (80023a4 <__libc_init_array+0x38>)
 8002372:	4c0d      	ldr	r4, [pc, #52]	@ (80023a8 <__libc_init_array+0x3c>)
 8002374:	1b64      	subs	r4, r4, r5
 8002376:	10a4      	asrs	r4, r4, #2
 8002378:	42a6      	cmp	r6, r4
 800237a:	d109      	bne.n	8002390 <__libc_init_array+0x24>
 800237c:	f000 fc78 	bl	8002c70 <_init>
 8002380:	2600      	movs	r6, #0
 8002382:	4d0a      	ldr	r5, [pc, #40]	@ (80023ac <__libc_init_array+0x40>)
 8002384:	4c0a      	ldr	r4, [pc, #40]	@ (80023b0 <__libc_init_array+0x44>)
 8002386:	1b64      	subs	r4, r4, r5
 8002388:	10a4      	asrs	r4, r4, #2
 800238a:	42a6      	cmp	r6, r4
 800238c:	d105      	bne.n	800239a <__libc_init_array+0x2e>
 800238e:	bd70      	pop	{r4, r5, r6, pc}
 8002390:	f855 3b04 	ldr.w	r3, [r5], #4
 8002394:	4798      	blx	r3
 8002396:	3601      	adds	r6, #1
 8002398:	e7ee      	b.n	8002378 <__libc_init_array+0xc>
 800239a:	f855 3b04 	ldr.w	r3, [r5], #4
 800239e:	4798      	blx	r3
 80023a0:	3601      	adds	r6, #1
 80023a2:	e7f2      	b.n	800238a <__libc_init_array+0x1e>
 80023a4:	08002d4c 	.word	0x08002d4c
 80023a8:	08002d4c 	.word	0x08002d4c
 80023ac:	08002d4c 	.word	0x08002d4c
 80023b0:	08002d50 	.word	0x08002d50

080023b4 <__retarget_lock_acquire_recursive>:
 80023b4:	4770      	bx	lr

080023b6 <__retarget_lock_release_recursive>:
 80023b6:	4770      	bx	lr

080023b8 <_free_r>:
 80023b8:	b538      	push	{r3, r4, r5, lr}
 80023ba:	4605      	mov	r5, r0
 80023bc:	2900      	cmp	r1, #0
 80023be:	d040      	beq.n	8002442 <_free_r+0x8a>
 80023c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023c4:	1f0c      	subs	r4, r1, #4
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	bfb8      	it	lt
 80023ca:	18e4      	addlt	r4, r4, r3
 80023cc:	f000 f8de 	bl	800258c <__malloc_lock>
 80023d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002444 <_free_r+0x8c>)
 80023d2:	6813      	ldr	r3, [r2, #0]
 80023d4:	b933      	cbnz	r3, 80023e4 <_free_r+0x2c>
 80023d6:	6063      	str	r3, [r4, #4]
 80023d8:	6014      	str	r4, [r2, #0]
 80023da:	4628      	mov	r0, r5
 80023dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023e0:	f000 b8da 	b.w	8002598 <__malloc_unlock>
 80023e4:	42a3      	cmp	r3, r4
 80023e6:	d908      	bls.n	80023fa <_free_r+0x42>
 80023e8:	6820      	ldr	r0, [r4, #0]
 80023ea:	1821      	adds	r1, r4, r0
 80023ec:	428b      	cmp	r3, r1
 80023ee:	bf01      	itttt	eq
 80023f0:	6819      	ldreq	r1, [r3, #0]
 80023f2:	685b      	ldreq	r3, [r3, #4]
 80023f4:	1809      	addeq	r1, r1, r0
 80023f6:	6021      	streq	r1, [r4, #0]
 80023f8:	e7ed      	b.n	80023d6 <_free_r+0x1e>
 80023fa:	461a      	mov	r2, r3
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	b10b      	cbz	r3, 8002404 <_free_r+0x4c>
 8002400:	42a3      	cmp	r3, r4
 8002402:	d9fa      	bls.n	80023fa <_free_r+0x42>
 8002404:	6811      	ldr	r1, [r2, #0]
 8002406:	1850      	adds	r0, r2, r1
 8002408:	42a0      	cmp	r0, r4
 800240a:	d10b      	bne.n	8002424 <_free_r+0x6c>
 800240c:	6820      	ldr	r0, [r4, #0]
 800240e:	4401      	add	r1, r0
 8002410:	1850      	adds	r0, r2, r1
 8002412:	4283      	cmp	r3, r0
 8002414:	6011      	str	r1, [r2, #0]
 8002416:	d1e0      	bne.n	80023da <_free_r+0x22>
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4408      	add	r0, r1
 800241e:	6010      	str	r0, [r2, #0]
 8002420:	6053      	str	r3, [r2, #4]
 8002422:	e7da      	b.n	80023da <_free_r+0x22>
 8002424:	d902      	bls.n	800242c <_free_r+0x74>
 8002426:	230c      	movs	r3, #12
 8002428:	602b      	str	r3, [r5, #0]
 800242a:	e7d6      	b.n	80023da <_free_r+0x22>
 800242c:	6820      	ldr	r0, [r4, #0]
 800242e:	1821      	adds	r1, r4, r0
 8002430:	428b      	cmp	r3, r1
 8002432:	bf01      	itttt	eq
 8002434:	6819      	ldreq	r1, [r3, #0]
 8002436:	685b      	ldreq	r3, [r3, #4]
 8002438:	1809      	addeq	r1, r1, r0
 800243a:	6021      	streq	r1, [r4, #0]
 800243c:	6063      	str	r3, [r4, #4]
 800243e:	6054      	str	r4, [r2, #4]
 8002440:	e7cb      	b.n	80023da <_free_r+0x22>
 8002442:	bd38      	pop	{r3, r4, r5, pc}
 8002444:	20000260 	.word	0x20000260

08002448 <sbrk_aligned>:
 8002448:	b570      	push	{r4, r5, r6, lr}
 800244a:	4e0f      	ldr	r6, [pc, #60]	@ (8002488 <sbrk_aligned+0x40>)
 800244c:	460c      	mov	r4, r1
 800244e:	6831      	ldr	r1, [r6, #0]
 8002450:	4605      	mov	r5, r0
 8002452:	b911      	cbnz	r1, 800245a <sbrk_aligned+0x12>
 8002454:	f000 fbaa 	bl	8002bac <_sbrk_r>
 8002458:	6030      	str	r0, [r6, #0]
 800245a:	4621      	mov	r1, r4
 800245c:	4628      	mov	r0, r5
 800245e:	f000 fba5 	bl	8002bac <_sbrk_r>
 8002462:	1c43      	adds	r3, r0, #1
 8002464:	d103      	bne.n	800246e <sbrk_aligned+0x26>
 8002466:	f04f 34ff 	mov.w	r4, #4294967295
 800246a:	4620      	mov	r0, r4
 800246c:	bd70      	pop	{r4, r5, r6, pc}
 800246e:	1cc4      	adds	r4, r0, #3
 8002470:	f024 0403 	bic.w	r4, r4, #3
 8002474:	42a0      	cmp	r0, r4
 8002476:	d0f8      	beq.n	800246a <sbrk_aligned+0x22>
 8002478:	1a21      	subs	r1, r4, r0
 800247a:	4628      	mov	r0, r5
 800247c:	f000 fb96 	bl	8002bac <_sbrk_r>
 8002480:	3001      	adds	r0, #1
 8002482:	d1f2      	bne.n	800246a <sbrk_aligned+0x22>
 8002484:	e7ef      	b.n	8002466 <sbrk_aligned+0x1e>
 8002486:	bf00      	nop
 8002488:	2000025c 	.word	0x2000025c

0800248c <_malloc_r>:
 800248c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002490:	1ccd      	adds	r5, r1, #3
 8002492:	f025 0503 	bic.w	r5, r5, #3
 8002496:	3508      	adds	r5, #8
 8002498:	2d0c      	cmp	r5, #12
 800249a:	bf38      	it	cc
 800249c:	250c      	movcc	r5, #12
 800249e:	2d00      	cmp	r5, #0
 80024a0:	4606      	mov	r6, r0
 80024a2:	db01      	blt.n	80024a8 <_malloc_r+0x1c>
 80024a4:	42a9      	cmp	r1, r5
 80024a6:	d904      	bls.n	80024b2 <_malloc_r+0x26>
 80024a8:	230c      	movs	r3, #12
 80024aa:	6033      	str	r3, [r6, #0]
 80024ac:	2000      	movs	r0, #0
 80024ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002588 <_malloc_r+0xfc>
 80024b6:	f000 f869 	bl	800258c <__malloc_lock>
 80024ba:	f8d8 3000 	ldr.w	r3, [r8]
 80024be:	461c      	mov	r4, r3
 80024c0:	bb44      	cbnz	r4, 8002514 <_malloc_r+0x88>
 80024c2:	4629      	mov	r1, r5
 80024c4:	4630      	mov	r0, r6
 80024c6:	f7ff ffbf 	bl	8002448 <sbrk_aligned>
 80024ca:	1c43      	adds	r3, r0, #1
 80024cc:	4604      	mov	r4, r0
 80024ce:	d158      	bne.n	8002582 <_malloc_r+0xf6>
 80024d0:	f8d8 4000 	ldr.w	r4, [r8]
 80024d4:	4627      	mov	r7, r4
 80024d6:	2f00      	cmp	r7, #0
 80024d8:	d143      	bne.n	8002562 <_malloc_r+0xd6>
 80024da:	2c00      	cmp	r4, #0
 80024dc:	d04b      	beq.n	8002576 <_malloc_r+0xea>
 80024de:	6823      	ldr	r3, [r4, #0]
 80024e0:	4639      	mov	r1, r7
 80024e2:	4630      	mov	r0, r6
 80024e4:	eb04 0903 	add.w	r9, r4, r3
 80024e8:	f000 fb60 	bl	8002bac <_sbrk_r>
 80024ec:	4581      	cmp	r9, r0
 80024ee:	d142      	bne.n	8002576 <_malloc_r+0xea>
 80024f0:	6821      	ldr	r1, [r4, #0]
 80024f2:	4630      	mov	r0, r6
 80024f4:	1a6d      	subs	r5, r5, r1
 80024f6:	4629      	mov	r1, r5
 80024f8:	f7ff ffa6 	bl	8002448 <sbrk_aligned>
 80024fc:	3001      	adds	r0, #1
 80024fe:	d03a      	beq.n	8002576 <_malloc_r+0xea>
 8002500:	6823      	ldr	r3, [r4, #0]
 8002502:	442b      	add	r3, r5
 8002504:	6023      	str	r3, [r4, #0]
 8002506:	f8d8 3000 	ldr.w	r3, [r8]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	bb62      	cbnz	r2, 8002568 <_malloc_r+0xdc>
 800250e:	f8c8 7000 	str.w	r7, [r8]
 8002512:	e00f      	b.n	8002534 <_malloc_r+0xa8>
 8002514:	6822      	ldr	r2, [r4, #0]
 8002516:	1b52      	subs	r2, r2, r5
 8002518:	d420      	bmi.n	800255c <_malloc_r+0xd0>
 800251a:	2a0b      	cmp	r2, #11
 800251c:	d917      	bls.n	800254e <_malloc_r+0xc2>
 800251e:	1961      	adds	r1, r4, r5
 8002520:	42a3      	cmp	r3, r4
 8002522:	6025      	str	r5, [r4, #0]
 8002524:	bf18      	it	ne
 8002526:	6059      	strne	r1, [r3, #4]
 8002528:	6863      	ldr	r3, [r4, #4]
 800252a:	bf08      	it	eq
 800252c:	f8c8 1000 	streq.w	r1, [r8]
 8002530:	5162      	str	r2, [r4, r5]
 8002532:	604b      	str	r3, [r1, #4]
 8002534:	4630      	mov	r0, r6
 8002536:	f000 f82f 	bl	8002598 <__malloc_unlock>
 800253a:	f104 000b 	add.w	r0, r4, #11
 800253e:	1d23      	adds	r3, r4, #4
 8002540:	f020 0007 	bic.w	r0, r0, #7
 8002544:	1ac2      	subs	r2, r0, r3
 8002546:	bf1c      	itt	ne
 8002548:	1a1b      	subne	r3, r3, r0
 800254a:	50a3      	strne	r3, [r4, r2]
 800254c:	e7af      	b.n	80024ae <_malloc_r+0x22>
 800254e:	6862      	ldr	r2, [r4, #4]
 8002550:	42a3      	cmp	r3, r4
 8002552:	bf0c      	ite	eq
 8002554:	f8c8 2000 	streq.w	r2, [r8]
 8002558:	605a      	strne	r2, [r3, #4]
 800255a:	e7eb      	b.n	8002534 <_malloc_r+0xa8>
 800255c:	4623      	mov	r3, r4
 800255e:	6864      	ldr	r4, [r4, #4]
 8002560:	e7ae      	b.n	80024c0 <_malloc_r+0x34>
 8002562:	463c      	mov	r4, r7
 8002564:	687f      	ldr	r7, [r7, #4]
 8002566:	e7b6      	b.n	80024d6 <_malloc_r+0x4a>
 8002568:	461a      	mov	r2, r3
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	42a3      	cmp	r3, r4
 800256e:	d1fb      	bne.n	8002568 <_malloc_r+0xdc>
 8002570:	2300      	movs	r3, #0
 8002572:	6053      	str	r3, [r2, #4]
 8002574:	e7de      	b.n	8002534 <_malloc_r+0xa8>
 8002576:	230c      	movs	r3, #12
 8002578:	4630      	mov	r0, r6
 800257a:	6033      	str	r3, [r6, #0]
 800257c:	f000 f80c 	bl	8002598 <__malloc_unlock>
 8002580:	e794      	b.n	80024ac <_malloc_r+0x20>
 8002582:	6005      	str	r5, [r0, #0]
 8002584:	e7d6      	b.n	8002534 <_malloc_r+0xa8>
 8002586:	bf00      	nop
 8002588:	20000260 	.word	0x20000260

0800258c <__malloc_lock>:
 800258c:	4801      	ldr	r0, [pc, #4]	@ (8002594 <__malloc_lock+0x8>)
 800258e:	f7ff bf11 	b.w	80023b4 <__retarget_lock_acquire_recursive>
 8002592:	bf00      	nop
 8002594:	20000258 	.word	0x20000258

08002598 <__malloc_unlock>:
 8002598:	4801      	ldr	r0, [pc, #4]	@ (80025a0 <__malloc_unlock+0x8>)
 800259a:	f7ff bf0c 	b.w	80023b6 <__retarget_lock_release_recursive>
 800259e:	bf00      	nop
 80025a0:	20000258 	.word	0x20000258

080025a4 <__ssputs_r>:
 80025a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025a8:	461f      	mov	r7, r3
 80025aa:	688e      	ldr	r6, [r1, #8]
 80025ac:	4682      	mov	sl, r0
 80025ae:	42be      	cmp	r6, r7
 80025b0:	460c      	mov	r4, r1
 80025b2:	4690      	mov	r8, r2
 80025b4:	680b      	ldr	r3, [r1, #0]
 80025b6:	d82d      	bhi.n	8002614 <__ssputs_r+0x70>
 80025b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80025bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80025c0:	d026      	beq.n	8002610 <__ssputs_r+0x6c>
 80025c2:	6965      	ldr	r5, [r4, #20]
 80025c4:	6909      	ldr	r1, [r1, #16]
 80025c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80025ca:	eba3 0901 	sub.w	r9, r3, r1
 80025ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80025d2:	1c7b      	adds	r3, r7, #1
 80025d4:	444b      	add	r3, r9
 80025d6:	106d      	asrs	r5, r5, #1
 80025d8:	429d      	cmp	r5, r3
 80025da:	bf38      	it	cc
 80025dc:	461d      	movcc	r5, r3
 80025de:	0553      	lsls	r3, r2, #21
 80025e0:	d527      	bpl.n	8002632 <__ssputs_r+0x8e>
 80025e2:	4629      	mov	r1, r5
 80025e4:	f7ff ff52 	bl	800248c <_malloc_r>
 80025e8:	4606      	mov	r6, r0
 80025ea:	b360      	cbz	r0, 8002646 <__ssputs_r+0xa2>
 80025ec:	464a      	mov	r2, r9
 80025ee:	6921      	ldr	r1, [r4, #16]
 80025f0:	f000 fafa 	bl	8002be8 <memcpy>
 80025f4:	89a3      	ldrh	r3, [r4, #12]
 80025f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80025fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025fe:	81a3      	strh	r3, [r4, #12]
 8002600:	6126      	str	r6, [r4, #16]
 8002602:	444e      	add	r6, r9
 8002604:	6026      	str	r6, [r4, #0]
 8002606:	463e      	mov	r6, r7
 8002608:	6165      	str	r5, [r4, #20]
 800260a:	eba5 0509 	sub.w	r5, r5, r9
 800260e:	60a5      	str	r5, [r4, #8]
 8002610:	42be      	cmp	r6, r7
 8002612:	d900      	bls.n	8002616 <__ssputs_r+0x72>
 8002614:	463e      	mov	r6, r7
 8002616:	4632      	mov	r2, r6
 8002618:	4641      	mov	r1, r8
 800261a:	6820      	ldr	r0, [r4, #0]
 800261c:	f000 faac 	bl	8002b78 <memmove>
 8002620:	2000      	movs	r0, #0
 8002622:	68a3      	ldr	r3, [r4, #8]
 8002624:	1b9b      	subs	r3, r3, r6
 8002626:	60a3      	str	r3, [r4, #8]
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	4433      	add	r3, r6
 800262c:	6023      	str	r3, [r4, #0]
 800262e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002632:	462a      	mov	r2, r5
 8002634:	f000 fae6 	bl	8002c04 <_realloc_r>
 8002638:	4606      	mov	r6, r0
 800263a:	2800      	cmp	r0, #0
 800263c:	d1e0      	bne.n	8002600 <__ssputs_r+0x5c>
 800263e:	4650      	mov	r0, sl
 8002640:	6921      	ldr	r1, [r4, #16]
 8002642:	f7ff feb9 	bl	80023b8 <_free_r>
 8002646:	230c      	movs	r3, #12
 8002648:	f8ca 3000 	str.w	r3, [sl]
 800264c:	89a3      	ldrh	r3, [r4, #12]
 800264e:	f04f 30ff 	mov.w	r0, #4294967295
 8002652:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002656:	81a3      	strh	r3, [r4, #12]
 8002658:	e7e9      	b.n	800262e <__ssputs_r+0x8a>
	...

0800265c <_svfiprintf_r>:
 800265c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002660:	4698      	mov	r8, r3
 8002662:	898b      	ldrh	r3, [r1, #12]
 8002664:	4607      	mov	r7, r0
 8002666:	061b      	lsls	r3, r3, #24
 8002668:	460d      	mov	r5, r1
 800266a:	4614      	mov	r4, r2
 800266c:	b09d      	sub	sp, #116	@ 0x74
 800266e:	d510      	bpl.n	8002692 <_svfiprintf_r+0x36>
 8002670:	690b      	ldr	r3, [r1, #16]
 8002672:	b973      	cbnz	r3, 8002692 <_svfiprintf_r+0x36>
 8002674:	2140      	movs	r1, #64	@ 0x40
 8002676:	f7ff ff09 	bl	800248c <_malloc_r>
 800267a:	6028      	str	r0, [r5, #0]
 800267c:	6128      	str	r0, [r5, #16]
 800267e:	b930      	cbnz	r0, 800268e <_svfiprintf_r+0x32>
 8002680:	230c      	movs	r3, #12
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	f04f 30ff 	mov.w	r0, #4294967295
 8002688:	b01d      	add	sp, #116	@ 0x74
 800268a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800268e:	2340      	movs	r3, #64	@ 0x40
 8002690:	616b      	str	r3, [r5, #20]
 8002692:	2300      	movs	r3, #0
 8002694:	9309      	str	r3, [sp, #36]	@ 0x24
 8002696:	2320      	movs	r3, #32
 8002698:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800269c:	2330      	movs	r3, #48	@ 0x30
 800269e:	f04f 0901 	mov.w	r9, #1
 80026a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80026a6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002840 <_svfiprintf_r+0x1e4>
 80026aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80026ae:	4623      	mov	r3, r4
 80026b0:	469a      	mov	sl, r3
 80026b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80026b6:	b10a      	cbz	r2, 80026bc <_svfiprintf_r+0x60>
 80026b8:	2a25      	cmp	r2, #37	@ 0x25
 80026ba:	d1f9      	bne.n	80026b0 <_svfiprintf_r+0x54>
 80026bc:	ebba 0b04 	subs.w	fp, sl, r4
 80026c0:	d00b      	beq.n	80026da <_svfiprintf_r+0x7e>
 80026c2:	465b      	mov	r3, fp
 80026c4:	4622      	mov	r2, r4
 80026c6:	4629      	mov	r1, r5
 80026c8:	4638      	mov	r0, r7
 80026ca:	f7ff ff6b 	bl	80025a4 <__ssputs_r>
 80026ce:	3001      	adds	r0, #1
 80026d0:	f000 80a7 	beq.w	8002822 <_svfiprintf_r+0x1c6>
 80026d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80026d6:	445a      	add	r2, fp
 80026d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80026da:	f89a 3000 	ldrb.w	r3, [sl]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 809f 	beq.w	8002822 <_svfiprintf_r+0x1c6>
 80026e4:	2300      	movs	r3, #0
 80026e6:	f04f 32ff 	mov.w	r2, #4294967295
 80026ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80026ee:	f10a 0a01 	add.w	sl, sl, #1
 80026f2:	9304      	str	r3, [sp, #16]
 80026f4:	9307      	str	r3, [sp, #28]
 80026f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80026fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80026fc:	4654      	mov	r4, sl
 80026fe:	2205      	movs	r2, #5
 8002700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002704:	484e      	ldr	r0, [pc, #312]	@ (8002840 <_svfiprintf_r+0x1e4>)
 8002706:	f000 fa61 	bl	8002bcc <memchr>
 800270a:	9a04      	ldr	r2, [sp, #16]
 800270c:	b9d8      	cbnz	r0, 8002746 <_svfiprintf_r+0xea>
 800270e:	06d0      	lsls	r0, r2, #27
 8002710:	bf44      	itt	mi
 8002712:	2320      	movmi	r3, #32
 8002714:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002718:	0711      	lsls	r1, r2, #28
 800271a:	bf44      	itt	mi
 800271c:	232b      	movmi	r3, #43	@ 0x2b
 800271e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002722:	f89a 3000 	ldrb.w	r3, [sl]
 8002726:	2b2a      	cmp	r3, #42	@ 0x2a
 8002728:	d015      	beq.n	8002756 <_svfiprintf_r+0xfa>
 800272a:	4654      	mov	r4, sl
 800272c:	2000      	movs	r0, #0
 800272e:	f04f 0c0a 	mov.w	ip, #10
 8002732:	9a07      	ldr	r2, [sp, #28]
 8002734:	4621      	mov	r1, r4
 8002736:	f811 3b01 	ldrb.w	r3, [r1], #1
 800273a:	3b30      	subs	r3, #48	@ 0x30
 800273c:	2b09      	cmp	r3, #9
 800273e:	d94b      	bls.n	80027d8 <_svfiprintf_r+0x17c>
 8002740:	b1b0      	cbz	r0, 8002770 <_svfiprintf_r+0x114>
 8002742:	9207      	str	r2, [sp, #28]
 8002744:	e014      	b.n	8002770 <_svfiprintf_r+0x114>
 8002746:	eba0 0308 	sub.w	r3, r0, r8
 800274a:	fa09 f303 	lsl.w	r3, r9, r3
 800274e:	4313      	orrs	r3, r2
 8002750:	46a2      	mov	sl, r4
 8002752:	9304      	str	r3, [sp, #16]
 8002754:	e7d2      	b.n	80026fc <_svfiprintf_r+0xa0>
 8002756:	9b03      	ldr	r3, [sp, #12]
 8002758:	1d19      	adds	r1, r3, #4
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	9103      	str	r1, [sp, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	bfbb      	ittet	lt
 8002762:	425b      	neglt	r3, r3
 8002764:	f042 0202 	orrlt.w	r2, r2, #2
 8002768:	9307      	strge	r3, [sp, #28]
 800276a:	9307      	strlt	r3, [sp, #28]
 800276c:	bfb8      	it	lt
 800276e:	9204      	strlt	r2, [sp, #16]
 8002770:	7823      	ldrb	r3, [r4, #0]
 8002772:	2b2e      	cmp	r3, #46	@ 0x2e
 8002774:	d10a      	bne.n	800278c <_svfiprintf_r+0x130>
 8002776:	7863      	ldrb	r3, [r4, #1]
 8002778:	2b2a      	cmp	r3, #42	@ 0x2a
 800277a:	d132      	bne.n	80027e2 <_svfiprintf_r+0x186>
 800277c:	9b03      	ldr	r3, [sp, #12]
 800277e:	3402      	adds	r4, #2
 8002780:	1d1a      	adds	r2, r3, #4
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	9203      	str	r2, [sp, #12]
 8002786:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800278a:	9305      	str	r3, [sp, #20]
 800278c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002844 <_svfiprintf_r+0x1e8>
 8002790:	2203      	movs	r2, #3
 8002792:	4650      	mov	r0, sl
 8002794:	7821      	ldrb	r1, [r4, #0]
 8002796:	f000 fa19 	bl	8002bcc <memchr>
 800279a:	b138      	cbz	r0, 80027ac <_svfiprintf_r+0x150>
 800279c:	2240      	movs	r2, #64	@ 0x40
 800279e:	9b04      	ldr	r3, [sp, #16]
 80027a0:	eba0 000a 	sub.w	r0, r0, sl
 80027a4:	4082      	lsls	r2, r0
 80027a6:	4313      	orrs	r3, r2
 80027a8:	3401      	adds	r4, #1
 80027aa:	9304      	str	r3, [sp, #16]
 80027ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027b0:	2206      	movs	r2, #6
 80027b2:	4825      	ldr	r0, [pc, #148]	@ (8002848 <_svfiprintf_r+0x1ec>)
 80027b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80027b8:	f000 fa08 	bl	8002bcc <memchr>
 80027bc:	2800      	cmp	r0, #0
 80027be:	d036      	beq.n	800282e <_svfiprintf_r+0x1d2>
 80027c0:	4b22      	ldr	r3, [pc, #136]	@ (800284c <_svfiprintf_r+0x1f0>)
 80027c2:	bb1b      	cbnz	r3, 800280c <_svfiprintf_r+0x1b0>
 80027c4:	9b03      	ldr	r3, [sp, #12]
 80027c6:	3307      	adds	r3, #7
 80027c8:	f023 0307 	bic.w	r3, r3, #7
 80027cc:	3308      	adds	r3, #8
 80027ce:	9303      	str	r3, [sp, #12]
 80027d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80027d2:	4433      	add	r3, r6
 80027d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80027d6:	e76a      	b.n	80026ae <_svfiprintf_r+0x52>
 80027d8:	460c      	mov	r4, r1
 80027da:	2001      	movs	r0, #1
 80027dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80027e0:	e7a8      	b.n	8002734 <_svfiprintf_r+0xd8>
 80027e2:	2300      	movs	r3, #0
 80027e4:	f04f 0c0a 	mov.w	ip, #10
 80027e8:	4619      	mov	r1, r3
 80027ea:	3401      	adds	r4, #1
 80027ec:	9305      	str	r3, [sp, #20]
 80027ee:	4620      	mov	r0, r4
 80027f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80027f4:	3a30      	subs	r2, #48	@ 0x30
 80027f6:	2a09      	cmp	r2, #9
 80027f8:	d903      	bls.n	8002802 <_svfiprintf_r+0x1a6>
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0c6      	beq.n	800278c <_svfiprintf_r+0x130>
 80027fe:	9105      	str	r1, [sp, #20]
 8002800:	e7c4      	b.n	800278c <_svfiprintf_r+0x130>
 8002802:	4604      	mov	r4, r0
 8002804:	2301      	movs	r3, #1
 8002806:	fb0c 2101 	mla	r1, ip, r1, r2
 800280a:	e7f0      	b.n	80027ee <_svfiprintf_r+0x192>
 800280c:	ab03      	add	r3, sp, #12
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	462a      	mov	r2, r5
 8002812:	4638      	mov	r0, r7
 8002814:	4b0e      	ldr	r3, [pc, #56]	@ (8002850 <_svfiprintf_r+0x1f4>)
 8002816:	a904      	add	r1, sp, #16
 8002818:	f3af 8000 	nop.w
 800281c:	1c42      	adds	r2, r0, #1
 800281e:	4606      	mov	r6, r0
 8002820:	d1d6      	bne.n	80027d0 <_svfiprintf_r+0x174>
 8002822:	89ab      	ldrh	r3, [r5, #12]
 8002824:	065b      	lsls	r3, r3, #25
 8002826:	f53f af2d 	bmi.w	8002684 <_svfiprintf_r+0x28>
 800282a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800282c:	e72c      	b.n	8002688 <_svfiprintf_r+0x2c>
 800282e:	ab03      	add	r3, sp, #12
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	462a      	mov	r2, r5
 8002834:	4638      	mov	r0, r7
 8002836:	4b06      	ldr	r3, [pc, #24]	@ (8002850 <_svfiprintf_r+0x1f4>)
 8002838:	a904      	add	r1, sp, #16
 800283a:	f000 f87d 	bl	8002938 <_printf_i>
 800283e:	e7ed      	b.n	800281c <_svfiprintf_r+0x1c0>
 8002840:	08002d0e 	.word	0x08002d0e
 8002844:	08002d14 	.word	0x08002d14
 8002848:	08002d18 	.word	0x08002d18
 800284c:	00000000 	.word	0x00000000
 8002850:	080025a5 	.word	0x080025a5

08002854 <_printf_common>:
 8002854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002858:	4616      	mov	r6, r2
 800285a:	4698      	mov	r8, r3
 800285c:	688a      	ldr	r2, [r1, #8]
 800285e:	690b      	ldr	r3, [r1, #16]
 8002860:	4607      	mov	r7, r0
 8002862:	4293      	cmp	r3, r2
 8002864:	bfb8      	it	lt
 8002866:	4613      	movlt	r3, r2
 8002868:	6033      	str	r3, [r6, #0]
 800286a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800286e:	460c      	mov	r4, r1
 8002870:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002874:	b10a      	cbz	r2, 800287a <_printf_common+0x26>
 8002876:	3301      	adds	r3, #1
 8002878:	6033      	str	r3, [r6, #0]
 800287a:	6823      	ldr	r3, [r4, #0]
 800287c:	0699      	lsls	r1, r3, #26
 800287e:	bf42      	ittt	mi
 8002880:	6833      	ldrmi	r3, [r6, #0]
 8002882:	3302      	addmi	r3, #2
 8002884:	6033      	strmi	r3, [r6, #0]
 8002886:	6825      	ldr	r5, [r4, #0]
 8002888:	f015 0506 	ands.w	r5, r5, #6
 800288c:	d106      	bne.n	800289c <_printf_common+0x48>
 800288e:	f104 0a19 	add.w	sl, r4, #25
 8002892:	68e3      	ldr	r3, [r4, #12]
 8002894:	6832      	ldr	r2, [r6, #0]
 8002896:	1a9b      	subs	r3, r3, r2
 8002898:	42ab      	cmp	r3, r5
 800289a:	dc2b      	bgt.n	80028f4 <_printf_common+0xa0>
 800289c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80028a0:	6822      	ldr	r2, [r4, #0]
 80028a2:	3b00      	subs	r3, #0
 80028a4:	bf18      	it	ne
 80028a6:	2301      	movne	r3, #1
 80028a8:	0692      	lsls	r2, r2, #26
 80028aa:	d430      	bmi.n	800290e <_printf_common+0xba>
 80028ac:	4641      	mov	r1, r8
 80028ae:	4638      	mov	r0, r7
 80028b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80028b4:	47c8      	blx	r9
 80028b6:	3001      	adds	r0, #1
 80028b8:	d023      	beq.n	8002902 <_printf_common+0xae>
 80028ba:	6823      	ldr	r3, [r4, #0]
 80028bc:	6922      	ldr	r2, [r4, #16]
 80028be:	f003 0306 	and.w	r3, r3, #6
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	bf14      	ite	ne
 80028c6:	2500      	movne	r5, #0
 80028c8:	6833      	ldreq	r3, [r6, #0]
 80028ca:	f04f 0600 	mov.w	r6, #0
 80028ce:	bf08      	it	eq
 80028d0:	68e5      	ldreq	r5, [r4, #12]
 80028d2:	f104 041a 	add.w	r4, r4, #26
 80028d6:	bf08      	it	eq
 80028d8:	1aed      	subeq	r5, r5, r3
 80028da:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80028de:	bf08      	it	eq
 80028e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80028e4:	4293      	cmp	r3, r2
 80028e6:	bfc4      	itt	gt
 80028e8:	1a9b      	subgt	r3, r3, r2
 80028ea:	18ed      	addgt	r5, r5, r3
 80028ec:	42b5      	cmp	r5, r6
 80028ee:	d11a      	bne.n	8002926 <_printf_common+0xd2>
 80028f0:	2000      	movs	r0, #0
 80028f2:	e008      	b.n	8002906 <_printf_common+0xb2>
 80028f4:	2301      	movs	r3, #1
 80028f6:	4652      	mov	r2, sl
 80028f8:	4641      	mov	r1, r8
 80028fa:	4638      	mov	r0, r7
 80028fc:	47c8      	blx	r9
 80028fe:	3001      	adds	r0, #1
 8002900:	d103      	bne.n	800290a <_printf_common+0xb6>
 8002902:	f04f 30ff 	mov.w	r0, #4294967295
 8002906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800290a:	3501      	adds	r5, #1
 800290c:	e7c1      	b.n	8002892 <_printf_common+0x3e>
 800290e:	2030      	movs	r0, #48	@ 0x30
 8002910:	18e1      	adds	r1, r4, r3
 8002912:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002916:	1c5a      	adds	r2, r3, #1
 8002918:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800291c:	4422      	add	r2, r4
 800291e:	3302      	adds	r3, #2
 8002920:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002924:	e7c2      	b.n	80028ac <_printf_common+0x58>
 8002926:	2301      	movs	r3, #1
 8002928:	4622      	mov	r2, r4
 800292a:	4641      	mov	r1, r8
 800292c:	4638      	mov	r0, r7
 800292e:	47c8      	blx	r9
 8002930:	3001      	adds	r0, #1
 8002932:	d0e6      	beq.n	8002902 <_printf_common+0xae>
 8002934:	3601      	adds	r6, #1
 8002936:	e7d9      	b.n	80028ec <_printf_common+0x98>

08002938 <_printf_i>:
 8002938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800293c:	7e0f      	ldrb	r7, [r1, #24]
 800293e:	4691      	mov	r9, r2
 8002940:	2f78      	cmp	r7, #120	@ 0x78
 8002942:	4680      	mov	r8, r0
 8002944:	460c      	mov	r4, r1
 8002946:	469a      	mov	sl, r3
 8002948:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800294a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800294e:	d807      	bhi.n	8002960 <_printf_i+0x28>
 8002950:	2f62      	cmp	r7, #98	@ 0x62
 8002952:	d80a      	bhi.n	800296a <_printf_i+0x32>
 8002954:	2f00      	cmp	r7, #0
 8002956:	f000 80d3 	beq.w	8002b00 <_printf_i+0x1c8>
 800295a:	2f58      	cmp	r7, #88	@ 0x58
 800295c:	f000 80ba 	beq.w	8002ad4 <_printf_i+0x19c>
 8002960:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002964:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002968:	e03a      	b.n	80029e0 <_printf_i+0xa8>
 800296a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800296e:	2b15      	cmp	r3, #21
 8002970:	d8f6      	bhi.n	8002960 <_printf_i+0x28>
 8002972:	a101      	add	r1, pc, #4	@ (adr r1, 8002978 <_printf_i+0x40>)
 8002974:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002978:	080029d1 	.word	0x080029d1
 800297c:	080029e5 	.word	0x080029e5
 8002980:	08002961 	.word	0x08002961
 8002984:	08002961 	.word	0x08002961
 8002988:	08002961 	.word	0x08002961
 800298c:	08002961 	.word	0x08002961
 8002990:	080029e5 	.word	0x080029e5
 8002994:	08002961 	.word	0x08002961
 8002998:	08002961 	.word	0x08002961
 800299c:	08002961 	.word	0x08002961
 80029a0:	08002961 	.word	0x08002961
 80029a4:	08002ae7 	.word	0x08002ae7
 80029a8:	08002a0f 	.word	0x08002a0f
 80029ac:	08002aa1 	.word	0x08002aa1
 80029b0:	08002961 	.word	0x08002961
 80029b4:	08002961 	.word	0x08002961
 80029b8:	08002b09 	.word	0x08002b09
 80029bc:	08002961 	.word	0x08002961
 80029c0:	08002a0f 	.word	0x08002a0f
 80029c4:	08002961 	.word	0x08002961
 80029c8:	08002961 	.word	0x08002961
 80029cc:	08002aa9 	.word	0x08002aa9
 80029d0:	6833      	ldr	r3, [r6, #0]
 80029d2:	1d1a      	adds	r2, r3, #4
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6032      	str	r2, [r6, #0]
 80029d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80029dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80029e0:	2301      	movs	r3, #1
 80029e2:	e09e      	b.n	8002b22 <_printf_i+0x1ea>
 80029e4:	6833      	ldr	r3, [r6, #0]
 80029e6:	6820      	ldr	r0, [r4, #0]
 80029e8:	1d19      	adds	r1, r3, #4
 80029ea:	6031      	str	r1, [r6, #0]
 80029ec:	0606      	lsls	r6, r0, #24
 80029ee:	d501      	bpl.n	80029f4 <_printf_i+0xbc>
 80029f0:	681d      	ldr	r5, [r3, #0]
 80029f2:	e003      	b.n	80029fc <_printf_i+0xc4>
 80029f4:	0645      	lsls	r5, r0, #25
 80029f6:	d5fb      	bpl.n	80029f0 <_printf_i+0xb8>
 80029f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80029fc:	2d00      	cmp	r5, #0
 80029fe:	da03      	bge.n	8002a08 <_printf_i+0xd0>
 8002a00:	232d      	movs	r3, #45	@ 0x2d
 8002a02:	426d      	negs	r5, r5
 8002a04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a08:	230a      	movs	r3, #10
 8002a0a:	4859      	ldr	r0, [pc, #356]	@ (8002b70 <_printf_i+0x238>)
 8002a0c:	e011      	b.n	8002a32 <_printf_i+0xfa>
 8002a0e:	6821      	ldr	r1, [r4, #0]
 8002a10:	6833      	ldr	r3, [r6, #0]
 8002a12:	0608      	lsls	r0, r1, #24
 8002a14:	f853 5b04 	ldr.w	r5, [r3], #4
 8002a18:	d402      	bmi.n	8002a20 <_printf_i+0xe8>
 8002a1a:	0649      	lsls	r1, r1, #25
 8002a1c:	bf48      	it	mi
 8002a1e:	b2ad      	uxthmi	r5, r5
 8002a20:	2f6f      	cmp	r7, #111	@ 0x6f
 8002a22:	6033      	str	r3, [r6, #0]
 8002a24:	bf14      	ite	ne
 8002a26:	230a      	movne	r3, #10
 8002a28:	2308      	moveq	r3, #8
 8002a2a:	4851      	ldr	r0, [pc, #324]	@ (8002b70 <_printf_i+0x238>)
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002a32:	6866      	ldr	r6, [r4, #4]
 8002a34:	2e00      	cmp	r6, #0
 8002a36:	bfa8      	it	ge
 8002a38:	6821      	ldrge	r1, [r4, #0]
 8002a3a:	60a6      	str	r6, [r4, #8]
 8002a3c:	bfa4      	itt	ge
 8002a3e:	f021 0104 	bicge.w	r1, r1, #4
 8002a42:	6021      	strge	r1, [r4, #0]
 8002a44:	b90d      	cbnz	r5, 8002a4a <_printf_i+0x112>
 8002a46:	2e00      	cmp	r6, #0
 8002a48:	d04b      	beq.n	8002ae2 <_printf_i+0x1aa>
 8002a4a:	4616      	mov	r6, r2
 8002a4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002a50:	fb03 5711 	mls	r7, r3, r1, r5
 8002a54:	5dc7      	ldrb	r7, [r0, r7]
 8002a56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002a5a:	462f      	mov	r7, r5
 8002a5c:	42bb      	cmp	r3, r7
 8002a5e:	460d      	mov	r5, r1
 8002a60:	d9f4      	bls.n	8002a4c <_printf_i+0x114>
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d10b      	bne.n	8002a7e <_printf_i+0x146>
 8002a66:	6823      	ldr	r3, [r4, #0]
 8002a68:	07df      	lsls	r7, r3, #31
 8002a6a:	d508      	bpl.n	8002a7e <_printf_i+0x146>
 8002a6c:	6923      	ldr	r3, [r4, #16]
 8002a6e:	6861      	ldr	r1, [r4, #4]
 8002a70:	4299      	cmp	r1, r3
 8002a72:	bfde      	ittt	le
 8002a74:	2330      	movle	r3, #48	@ 0x30
 8002a76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002a7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002a7e:	1b92      	subs	r2, r2, r6
 8002a80:	6122      	str	r2, [r4, #16]
 8002a82:	464b      	mov	r3, r9
 8002a84:	4621      	mov	r1, r4
 8002a86:	4640      	mov	r0, r8
 8002a88:	f8cd a000 	str.w	sl, [sp]
 8002a8c:	aa03      	add	r2, sp, #12
 8002a8e:	f7ff fee1 	bl	8002854 <_printf_common>
 8002a92:	3001      	adds	r0, #1
 8002a94:	d14a      	bne.n	8002b2c <_printf_i+0x1f4>
 8002a96:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9a:	b004      	add	sp, #16
 8002a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002aa0:	6823      	ldr	r3, [r4, #0]
 8002aa2:	f043 0320 	orr.w	r3, r3, #32
 8002aa6:	6023      	str	r3, [r4, #0]
 8002aa8:	2778      	movs	r7, #120	@ 0x78
 8002aaa:	4832      	ldr	r0, [pc, #200]	@ (8002b74 <_printf_i+0x23c>)
 8002aac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002ab0:	6823      	ldr	r3, [r4, #0]
 8002ab2:	6831      	ldr	r1, [r6, #0]
 8002ab4:	061f      	lsls	r7, r3, #24
 8002ab6:	f851 5b04 	ldr.w	r5, [r1], #4
 8002aba:	d402      	bmi.n	8002ac2 <_printf_i+0x18a>
 8002abc:	065f      	lsls	r7, r3, #25
 8002abe:	bf48      	it	mi
 8002ac0:	b2ad      	uxthmi	r5, r5
 8002ac2:	6031      	str	r1, [r6, #0]
 8002ac4:	07d9      	lsls	r1, r3, #31
 8002ac6:	bf44      	itt	mi
 8002ac8:	f043 0320 	orrmi.w	r3, r3, #32
 8002acc:	6023      	strmi	r3, [r4, #0]
 8002ace:	b11d      	cbz	r5, 8002ad8 <_printf_i+0x1a0>
 8002ad0:	2310      	movs	r3, #16
 8002ad2:	e7ab      	b.n	8002a2c <_printf_i+0xf4>
 8002ad4:	4826      	ldr	r0, [pc, #152]	@ (8002b70 <_printf_i+0x238>)
 8002ad6:	e7e9      	b.n	8002aac <_printf_i+0x174>
 8002ad8:	6823      	ldr	r3, [r4, #0]
 8002ada:	f023 0320 	bic.w	r3, r3, #32
 8002ade:	6023      	str	r3, [r4, #0]
 8002ae0:	e7f6      	b.n	8002ad0 <_printf_i+0x198>
 8002ae2:	4616      	mov	r6, r2
 8002ae4:	e7bd      	b.n	8002a62 <_printf_i+0x12a>
 8002ae6:	6833      	ldr	r3, [r6, #0]
 8002ae8:	6825      	ldr	r5, [r4, #0]
 8002aea:	1d18      	adds	r0, r3, #4
 8002aec:	6961      	ldr	r1, [r4, #20]
 8002aee:	6030      	str	r0, [r6, #0]
 8002af0:	062e      	lsls	r6, r5, #24
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	d501      	bpl.n	8002afa <_printf_i+0x1c2>
 8002af6:	6019      	str	r1, [r3, #0]
 8002af8:	e002      	b.n	8002b00 <_printf_i+0x1c8>
 8002afa:	0668      	lsls	r0, r5, #25
 8002afc:	d5fb      	bpl.n	8002af6 <_printf_i+0x1be>
 8002afe:	8019      	strh	r1, [r3, #0]
 8002b00:	2300      	movs	r3, #0
 8002b02:	4616      	mov	r6, r2
 8002b04:	6123      	str	r3, [r4, #16]
 8002b06:	e7bc      	b.n	8002a82 <_printf_i+0x14a>
 8002b08:	6833      	ldr	r3, [r6, #0]
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	1d1a      	adds	r2, r3, #4
 8002b0e:	6032      	str	r2, [r6, #0]
 8002b10:	681e      	ldr	r6, [r3, #0]
 8002b12:	6862      	ldr	r2, [r4, #4]
 8002b14:	4630      	mov	r0, r6
 8002b16:	f000 f859 	bl	8002bcc <memchr>
 8002b1a:	b108      	cbz	r0, 8002b20 <_printf_i+0x1e8>
 8002b1c:	1b80      	subs	r0, r0, r6
 8002b1e:	6060      	str	r0, [r4, #4]
 8002b20:	6863      	ldr	r3, [r4, #4]
 8002b22:	6123      	str	r3, [r4, #16]
 8002b24:	2300      	movs	r3, #0
 8002b26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b2a:	e7aa      	b.n	8002a82 <_printf_i+0x14a>
 8002b2c:	4632      	mov	r2, r6
 8002b2e:	4649      	mov	r1, r9
 8002b30:	4640      	mov	r0, r8
 8002b32:	6923      	ldr	r3, [r4, #16]
 8002b34:	47d0      	blx	sl
 8002b36:	3001      	adds	r0, #1
 8002b38:	d0ad      	beq.n	8002a96 <_printf_i+0x15e>
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	079b      	lsls	r3, r3, #30
 8002b3e:	d413      	bmi.n	8002b68 <_printf_i+0x230>
 8002b40:	68e0      	ldr	r0, [r4, #12]
 8002b42:	9b03      	ldr	r3, [sp, #12]
 8002b44:	4298      	cmp	r0, r3
 8002b46:	bfb8      	it	lt
 8002b48:	4618      	movlt	r0, r3
 8002b4a:	e7a6      	b.n	8002a9a <_printf_i+0x162>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	4632      	mov	r2, r6
 8002b50:	4649      	mov	r1, r9
 8002b52:	4640      	mov	r0, r8
 8002b54:	47d0      	blx	sl
 8002b56:	3001      	adds	r0, #1
 8002b58:	d09d      	beq.n	8002a96 <_printf_i+0x15e>
 8002b5a:	3501      	adds	r5, #1
 8002b5c:	68e3      	ldr	r3, [r4, #12]
 8002b5e:	9903      	ldr	r1, [sp, #12]
 8002b60:	1a5b      	subs	r3, r3, r1
 8002b62:	42ab      	cmp	r3, r5
 8002b64:	dcf2      	bgt.n	8002b4c <_printf_i+0x214>
 8002b66:	e7eb      	b.n	8002b40 <_printf_i+0x208>
 8002b68:	2500      	movs	r5, #0
 8002b6a:	f104 0619 	add.w	r6, r4, #25
 8002b6e:	e7f5      	b.n	8002b5c <_printf_i+0x224>
 8002b70:	08002d1f 	.word	0x08002d1f
 8002b74:	08002d30 	.word	0x08002d30

08002b78 <memmove>:
 8002b78:	4288      	cmp	r0, r1
 8002b7a:	b510      	push	{r4, lr}
 8002b7c:	eb01 0402 	add.w	r4, r1, r2
 8002b80:	d902      	bls.n	8002b88 <memmove+0x10>
 8002b82:	4284      	cmp	r4, r0
 8002b84:	4623      	mov	r3, r4
 8002b86:	d807      	bhi.n	8002b98 <memmove+0x20>
 8002b88:	1e43      	subs	r3, r0, #1
 8002b8a:	42a1      	cmp	r1, r4
 8002b8c:	d008      	beq.n	8002ba0 <memmove+0x28>
 8002b8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002b96:	e7f8      	b.n	8002b8a <memmove+0x12>
 8002b98:	4601      	mov	r1, r0
 8002b9a:	4402      	add	r2, r0
 8002b9c:	428a      	cmp	r2, r1
 8002b9e:	d100      	bne.n	8002ba2 <memmove+0x2a>
 8002ba0:	bd10      	pop	{r4, pc}
 8002ba2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ba6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002baa:	e7f7      	b.n	8002b9c <memmove+0x24>

08002bac <_sbrk_r>:
 8002bac:	b538      	push	{r3, r4, r5, lr}
 8002bae:	2300      	movs	r3, #0
 8002bb0:	4d05      	ldr	r5, [pc, #20]	@ (8002bc8 <_sbrk_r+0x1c>)
 8002bb2:	4604      	mov	r4, r0
 8002bb4:	4608      	mov	r0, r1
 8002bb6:	602b      	str	r3, [r5, #0]
 8002bb8:	f7fd fd74 	bl	80006a4 <_sbrk>
 8002bbc:	1c43      	adds	r3, r0, #1
 8002bbe:	d102      	bne.n	8002bc6 <_sbrk_r+0x1a>
 8002bc0:	682b      	ldr	r3, [r5, #0]
 8002bc2:	b103      	cbz	r3, 8002bc6 <_sbrk_r+0x1a>
 8002bc4:	6023      	str	r3, [r4, #0]
 8002bc6:	bd38      	pop	{r3, r4, r5, pc}
 8002bc8:	20000254 	.word	0x20000254

08002bcc <memchr>:
 8002bcc:	4603      	mov	r3, r0
 8002bce:	b510      	push	{r4, lr}
 8002bd0:	b2c9      	uxtb	r1, r1
 8002bd2:	4402      	add	r2, r0
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	d101      	bne.n	8002bde <memchr+0x12>
 8002bda:	2000      	movs	r0, #0
 8002bdc:	e003      	b.n	8002be6 <memchr+0x1a>
 8002bde:	7804      	ldrb	r4, [r0, #0]
 8002be0:	3301      	adds	r3, #1
 8002be2:	428c      	cmp	r4, r1
 8002be4:	d1f6      	bne.n	8002bd4 <memchr+0x8>
 8002be6:	bd10      	pop	{r4, pc}

08002be8 <memcpy>:
 8002be8:	440a      	add	r2, r1
 8002bea:	4291      	cmp	r1, r2
 8002bec:	f100 33ff 	add.w	r3, r0, #4294967295
 8002bf0:	d100      	bne.n	8002bf4 <memcpy+0xc>
 8002bf2:	4770      	bx	lr
 8002bf4:	b510      	push	{r4, lr}
 8002bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002bfa:	4291      	cmp	r1, r2
 8002bfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c00:	d1f9      	bne.n	8002bf6 <memcpy+0xe>
 8002c02:	bd10      	pop	{r4, pc}

08002c04 <_realloc_r>:
 8002c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c08:	4680      	mov	r8, r0
 8002c0a:	4615      	mov	r5, r2
 8002c0c:	460c      	mov	r4, r1
 8002c0e:	b921      	cbnz	r1, 8002c1a <_realloc_r+0x16>
 8002c10:	4611      	mov	r1, r2
 8002c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c16:	f7ff bc39 	b.w	800248c <_malloc_r>
 8002c1a:	b92a      	cbnz	r2, 8002c28 <_realloc_r+0x24>
 8002c1c:	f7ff fbcc 	bl	80023b8 <_free_r>
 8002c20:	2400      	movs	r4, #0
 8002c22:	4620      	mov	r0, r4
 8002c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c28:	f000 f81a 	bl	8002c60 <_malloc_usable_size_r>
 8002c2c:	4285      	cmp	r5, r0
 8002c2e:	4606      	mov	r6, r0
 8002c30:	d802      	bhi.n	8002c38 <_realloc_r+0x34>
 8002c32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002c36:	d8f4      	bhi.n	8002c22 <_realloc_r+0x1e>
 8002c38:	4629      	mov	r1, r5
 8002c3a:	4640      	mov	r0, r8
 8002c3c:	f7ff fc26 	bl	800248c <_malloc_r>
 8002c40:	4607      	mov	r7, r0
 8002c42:	2800      	cmp	r0, #0
 8002c44:	d0ec      	beq.n	8002c20 <_realloc_r+0x1c>
 8002c46:	42b5      	cmp	r5, r6
 8002c48:	462a      	mov	r2, r5
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	bf28      	it	cs
 8002c4e:	4632      	movcs	r2, r6
 8002c50:	f7ff ffca 	bl	8002be8 <memcpy>
 8002c54:	4621      	mov	r1, r4
 8002c56:	4640      	mov	r0, r8
 8002c58:	f7ff fbae 	bl	80023b8 <_free_r>
 8002c5c:	463c      	mov	r4, r7
 8002c5e:	e7e0      	b.n	8002c22 <_realloc_r+0x1e>

08002c60 <_malloc_usable_size_r>:
 8002c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c64:	1f18      	subs	r0, r3, #4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	bfbc      	itt	lt
 8002c6a:	580b      	ldrlt	r3, [r1, r0]
 8002c6c:	18c0      	addlt	r0, r0, r3
 8002c6e:	4770      	bx	lr

08002c70 <_init>:
 8002c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c72:	bf00      	nop
 8002c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c76:	bc08      	pop	{r3}
 8002c78:	469e      	mov	lr, r3
 8002c7a:	4770      	bx	lr

08002c7c <_fini>:
 8002c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7e:	bf00      	nop
 8002c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c82:	bc08      	pop	{r3}
 8002c84:	469e      	mov	lr, r3
 8002c86:	4770      	bx	lr
